---
title: "Salmon Crossing Data Tutorial"
filters:
  - webr
  - naquiz
df-print: kable

format: 
  html: 
    toc: true
    self-contained: false
callout-icon: false
---

<script>
console.log("Script loaded");
console.log("Button clicked");
document.addEventListener("DOMContentLoaded", function() {
    let currentPartIndex = 0;
    const parts = document.querySelectorAll(".tutorial-part");
    const buttons = document.querySelectorAll("button[id^='continue-button']");
    const headerHeight = document.querySelector("header") ? document.querySelector("header").offsetHeight : 0;
    const sidebarLinks = document.querySelectorAll("#quarto-margin-sidebar .sidebar a"); // Updated selector

 // Log the selected elements
    console.log('Tutorial parts:', parts);
    console.log('Continue buttons:', buttons);

    // Hide all tutorial parts except the first one
    parts.forEach(function(part, index) {
        if (index !== 0) {
            part.style.display = "none";}});
    
    // Function to scroll to the top of the element, accounting for a fixed header
      function scrollToElement(element) {
          const elementTop = element.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
              top: elementTop - headerHeight,
             behavior: "smooth"
         });
     }

    
    // Add click event listeners to each button
    buttons.forEach(function(button, index) {
        button.addEventListener("click", function() {
            if (currentPartIndex < parts.length - 1) {
                parts[currentPartIndex].style.display = "block";
                buttons[currentPartIndex].style.display = "none";
                currentPartIndex++;
                parts[currentPartIndex].style.display= "block";
                 // Jump to the id anchor for the current section
         //   window.location.hash = parts[currentPartIndex].id;
        // Scroll to the top of the current section
                scrollToElement(parts[currentPartIndex]);
             // Adjust scroll position to account for the height of the navbar
              //   window.scrollBy(0, 10000);
                } else {
                alert("End of tutorial");}});});});
                
          // Add click event listeners to sidebar links
            sidebarLinks.forEach((link, index) => {
                link.addEventListener("click", function(event) {
                    event.preventDefault();
                    showPart(index);
                    scrollToElement(parts[index]);
                });
            });
</script>


```{webr-r}
#| context: setup
#| warning: false
library(tidyverse)
library(DT)
library(knitr)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Bonneville_Dam_1939_2023_Chinook_CSV.csv"
download.file(url, "Bonneville_Dam_1939_2023_Chinook_CSV.csv")
#Pulls data that has been loaded into the 6-12-Data-Sceince_resources github repo. 

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Chinook_Dalles_1957_2023.csv"
download.file(url, "Chinook_Dalles_1957_2023.csv")

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Steelhead_1939_2023_BonnevilleDamCSV.csv"
download.file(url, "Steelhead_1939_2023_BonnevilleDamCSV.csv")


```

```{webr-r}
#| context: setup
Dalles_chinook <- read.csv("Chinook_Dalles_1957_2023.csv")

names(Dalles_chinook) <- Dalles_chinook[1,]
Dalles_chinook <- Dalles_chinook[-1,]
#Move first row to header and delete the row
Dalles_chinook$`2023:TDA:Chin (fish/day)`  <- NULL
  #Delete 2023 row because it
Dalles_chinook_t <- t(Dalles_chinook)
#Transpose
colnames(Dalles_chinook_t) <- Dalles_chinook_t[1,]
Dalles_chinook_t <- Dalles_chinook_t[-1,]
#Move first row to header and delete the row

Dalles_chinook_t <- as.data.frame(Dalles_chinook_t)

Dalles_chinook_t <- Dalles_chinook_t %>% replace(is.na(.), 0)
#make NA into 0 values
Dalles_chinook_t <- Dalles_chinook_t %>% select(1:365)
#Delete extra info we don't want 
#str(Dalles_chinook_t)
#Check what kind of data we have... Oh no! It's character data not numeric data
Dalles_chinook_t <-Dalles_chinook_t %>% mutate_all(function(x) as.numeric(as.character(x)))
#Change character to numeric data
Dalles_chinook_sum <- Dalles_chinook_t %>%
  mutate(sum_of_rows = rowSums(Dalles_chinook_t)) 
#Add a new column summing the rows

Dalles_chinook_sum$year <- 2022:1957
#Add a year column with just the year 


Dalles_chinook_sum <- Dalles_chinook_sum %>% mutate(sum_of_rows_100 = (sum_of_rows/1000))

Bon_steel <- read.csv("Steelhead_1939_2023_BonnevilleDamCSV.csv")

names(Bon_steel) <- Bon_steel[1,]
Bon_steel <- Bon_steel[-1,]
#Move first row to header and delete the row
Bon_steel$`2023:BON:WStlhd (fish/day)`  <- NULL
  #Delete 2023 row because it
Bon_steel_t <- t(Bon_steel)
#Transpose
colnames(Bon_steel_t) <- Bon_steel_t[1,]
Bon_steel_t <- Bon_steel_t[-1,]
#Move first row to header and delete the row

Bon_steel_t <- as.data.frame(Bon_steel_t)

Bon_steel_t <- Bon_steel_t %>% replace(is.na(.), 0)
#make NA into 0 values
Bon_steel_t <- Bon_steel_t %>% select(1:365)
#Delete extra info we don't want 
#str(Bon_steel_t)
#Check what kind of data we have... Oh no! It's character data not numeric data
Bon_steel_t <-Bon_steel_t %>% mutate_all(function(x) as.numeric(as.character(x)))
#Change character to numeric data
Bon_steel_sum <-  Bon_steel_t %>%
  mutate(sum_of_rows = rowSums(Bon_steel_t)) 
#Add a new column summing the rows
Bon_steel_sum <- Bon_steel_sum[-(22:86),]
 #Delete extra rows that have all NA values


Bon_steel_sum$year <- 2022:2002
#Add a year column with just the year 


Bon_steel_sum <- Bon_steel_sum %>% mutate(sum_of_rows_100 = (sum_of_rows/1000))
```

```{webr-r}
#| context: setup
#add 2023 data: 
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Bon_chinook_2023.csv"
download.file(url, "Bon_chinook_2023.csv")
Bon_chinook_2023 <- read.csv("Bon_chinook_2023.csv")

#Pulls data that has been loaded into the Olivia-Test github repo. 
Bon_chinook1 <- read.csv("Bonneville_Dam_1939_2023_Chinook_CSV.csv")

names(Bon_chinook1) <- Bon_chinook1[1,]
Bon_chinook1 <- Bon_chinook1[-1,]
  #Move first row to header and delete the row

#Add in the 2023 data
#Bon_chinook_2023 <- Bon_chinook_2023[-c(374:387),]
  #Delete extra rows 
#Bon_chinook1<- mutate(Bon_chinook1, `2023:BON:Chin (fish/day)` = Bon_chinook_2023$Chin)
  #Replace 2023 column which is half empty with new 2023 data


Bon_chinook <- Bon_chinook1
Bon_chinook$`2023:BON:Chin (fish/day)`<- NULL
  #Delete 2023 row because it
Bon_chinook_t <- t(Bon_chinook)
  #Transpose
colnames(Bon_chinook_t) <- Bon_chinook_t[1,]
Bon_chinook_t <- Bon_chinook_t[-1,]
  #Move first row to header and delete the row

Bon_chinook_t <- as.data.frame(Bon_chinook_t)

Bon_chinook_t <- Bon_chinook_t %>% replace(is.na(.), 0)
  #make NA into 0 values
Bon_chinook_t <- Bon_chinook_t %>% select(1:365)
  #Delete extra info we don't want 
#str(Bon_chinook_t)
  #Check what kind of data we have... Oh no! It's character data not numeric data
Bonneville_chinook<- Bon_chinook_t %>% mutate_all(function(x) as.numeric(as.character(x)))
  #Change character to numeric data


Bon_chinook_sum <-  Bonneville_chinook %>% mutate(sum_of_rows = rowSums(Bonneville_chinook))
  #Add a new column summing the rows

Bon_chinook_sum$year <- 2022:1938
  #Add a year column with just the year

options(scipen = 999) 
  #Don't use standard notation
Bon_chinook_sum <- Bon_chinook_sum %>% mutate(sum_of_rows_100 = (sum_of_rows/1000))
```

```{r}
#| include: false
library(tidyverse)
library(DT)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Bonneville_Dam_1939_2023_Chinook_CSV.csv"
download.file(url, "Bonneville_Dam_1939_2023_Chinook_CSV.csv")

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Chinook_Dalles_1957_2023.csv"
download.file(url, "Chinook_Dalles_1957_2023.csv")

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Steelhead_1939_2023_BonnevilleDamCSV.csv"
download.file(url, "Steelhead_1939_2023_BonnevilleDamCSV.csv")

#add 2023 data: 
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Bon_chinook_2023.csv"
download.file(url, "Bon_chinook_2023.csv")
Bon_chinook_2023 <- read.csv("Bon_chinook_2023.csv")

#Pulls data that has been loaded into the Olivia-Test github repo. 
Bon_chinook1 <- read.csv("Bonneville_Dam_1939_2023_Chinook_CSV.csv")

names(Bon_chinook1) <- Bon_chinook1[1,]
Bon_chinook1 <- Bon_chinook1[-1,]
  #Move first row to header and delete the row

#Add in the 2023 data
#Bon_chinook_2023 <- Bon_chinook_2023[-c(374:387),]
  #Delete extra rows 
#Bon_chinook1<- Bon_chinook1 |> mutate(`2023:BON:Chin (fish/day)` = Bon_chinook_2023$Chin)
  #Replace 2023 column which is half empty with new 2023 data


Bon_chinook <- Bon_chinook1
Bon_chinook$`2023:BON:Chin (fish/day)`<- NULL
  #Delete 2023 row because it is incomplete
Bon_chinook_t <- t(Bon_chinook)
  #Transpose
colnames(Bon_chinook_t) <- Bon_chinook_t[1,]
Bon_chinook_t <- Bon_chinook_t[-1,]
  #Move first row to header and delete the row

Bon_chinook_t <- as.data.frame(Bon_chinook_t)

Bon_chinook_t <- Bon_chinook_t %>% replace(is.na(.), 0)
  #make NA into 0 values
Bon_chinook_t <- Bon_chinook_t %>% select(1:365)
  #Delete extra info we don't want 
#str(Bon_chinook_t)
  #Check what kind of data we have... Oh no! It's character data not numeric data
Bonneville_chinook<- Bon_chinook_t %>% mutate_all(function(x) as.numeric(as.character(x)))
  #Change character to numeric data


Bon_chinook_sum <-  Bonneville_chinook %>% mutate(sum_of_rows = rowSums(Bonneville_chinook))
  #Add a new column summing the rows

Bon_chinook_sum$year <- 2022:1938
  #Add a year column with just the year

options(scipen = 999) 
  #Don't use standard notation
Bon_chinook_sum <- Bon_chinook_sum %>% mutate(sum_of_rows_100 = (sum_of_rows/1000))
```

## Fish Crossings - Introduction

Hello! Welcome to this tutorial. We're going to learn about how a computer can use HUGE amounts of data and make cool graphs from it.

<div class="tutorial-part" style="display: block;">

::: columns
::: {.column width="35%"}
![From https://www.spokesman.com/blogs/outdoors/2015/may/08/how-fast-can-salmon-swim-upstream-idaho-waters/](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/salmon_dog.jpg){fig-align="left" fig-alt="A dog jumping towards Chinook salmon in a fish ladder" height="2.5in"}
:::

::: {.column width="5%"}
<br>
:::

::: {.column width="60%"}
Today we'll get to learn about fish crossings at dams in the Columbia River.

We'll start by looking at the Bonneville Dam and learn how many salmon and steelhead cross the Bonneville dam each year.
:::
:::

## What is the Bonneville Dam?

::: columns
::: {.column width="35%"}
![From https://thegorgeguide.com/bonneville-dam-visitor-center/](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/dam_image.jpg){fig-align="left" fig-alt="Bonneville Dam arial view" height="2.5in"}
:::


::: {.column width="65%"}
![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/dam_map.jpg){fig-align="right" fig-alt="Bonneville Dam map" height="3in"}
:::
:::

The Bonneville Dam is in the Columbia River and was constructed between 1933 and 1938. When it was constructed, it had a large impact on the surrounding land, Indigenous communities, and animals and plants.

::: {.callout-warning collapse="false" appearance="simple"}

**Brainstorm:**

*What are some positive and negative impacts you think the dam might have?*

Talk with your classmates about how some impacts the dam might have on the surronding areas. Here are some ideas you can consider:

-   Hydropower
-   Native American communities
-   Salmon populations
-   Salmon are important spiritually and culturally to Native Americans
-   Sea lions
-   Other animals who live where the dam was created

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### How does the Bonneville Dam impact Salmon? 

In this tutorial, we're going to look at **data** and learn about how the dam impacts Salmon **returning** to the Columbia river to spawn.

First, how are fishing swimming through the Bonneville Dam? 

It is way to large for them to swim over, so they use a **fish ladder** to swim through the dam. Someone built the fish ladder when they were building the dam to help the fish get through! Watch this video to see how they can swim through the fish ladder.

{{< video https://www.youtube.com/watch?v=sabk7Khq0kQ&t=59s >}}

As salmon come through the fish ladder, they need to be counted to see how many salmon come through and learn how many make it through the dam and return upstream to spawn. Some days, thousands of fish come through the dam! How do you think they are counted? 

Watch this video to see!

{{< video https://www.youtube.com/watch?v=zoHpE5scs2I >}}

As you saw in the video, someone counts each fish that goes by. They write down exactly how many fish they see, what time and what kind of fish. All those numbers get added together and become **data**. Then, someone puts all that data [online](https://www.cbr.washington.edu/dart/query/adult_daily){target="_blank"} for anyone to see (like us!).

There is A LOT of data (numbers of fish) that they collect. It would be pretty pretty hard to understand just by looking at it. In fact, if you click the blue box right below this, you can see all the data. It should look pretty confusing! Keep reading to learn how we can use the computer to better understand all those numbers.

::: {.callout-note collapse="true"}
## Click this to see the data that someone collected at the fish ladder!

```{r}
#| echo: false
#| output: true
library(DT)
library(knitr)
datatable(Bon_chinook1)
#kable(Bon_chinook1)
```
:::

Note: the data is from [Columbia Basin Research](https://www.cbr.washington.edu/dart/query/adult_daily){target="_blank"}

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Analyzing HUGE data with the computer

We're going to analyze all the numbers that are collected at the Bonneville Dam using the computer. 

### Using R

We will use a coding language called "R". Basically, "R" is a collection of commands that the computer understands. You can tell the computer one of the commands and it will know to do something.

For example one command the computer knows is multiplication! Try typing `5*3` in the box right below this. Then click the green play button that says "run code"

::: panel-tabset

## Code editor

```{webr-r}
# Type your code here!


```

## Answer

**Press** run code

```{webr-r}
# Type your code here!
5*3

```
:::

What happened? Did you see the number 15 pop out?

The computer can also do very complicated things, like create graphs. We'll learn more about that later in this tutorial.

The box above where you typed `5*3` is called a **code chunk**. You can type commands into any similar box and it will tell the computer to do various things.

Here's another code chunk you can try typing something into. Maybe you want to try a division problem? Or maybe you want the computer to say hello to you? There's a few different tabs you can click on to learn how to do cool things!

::: panel-tabset
## Code editor

Want to try out your own code? Maybe another math problem? Here's a place to do that. Otherwise click on the tabs to learn something new!

```{webr}
#Type your code here



```

## Say hello

Would you like the computer to say hello to you?

First, type your name where the blank \_\_\_\_\_\_\_ is, in the second code chunk. Don't delete the quotation marks.

Here's an example:

```{webr}
#| read-only: true
name = "Olivia"
```

Now your turn. Type your name instead of the blank \_\_\_\_\_ and then click play:

```{webr}
name = "_____"

cat("Hello", name, "How are you today?")

```

## Find the largest number

We can use r to find the largest number in a long list of numbers. To try this out, type a bunch of numbers inside the parentheses (\_\_\_\_\_\_). Separate your numbers with a comma. Don't delete anything else!

Here's an example:

```{webr-r}
#| read-only:true
numbers = c(41, 55, 98, 104, 2, 8)
```

Now you try. Type your numbers after the first parenthesis and separate them with a comma. Then click run.

```{webr-r}
numbers = c(_,_,_,_,_,_)
```

Now let's run a function that will tell us which number is the biggest. Click the play button on this code chunk too.

```{webr-r}
max(numbers)
```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Looking at data

One thing the computer is very useful for is dealing with HUGE amounts of data. **Data** is a collection of lots of numbers that tell us information about something.

Let's return to the data that is collected at the Bonneville Dam. I've used coding in the background of this tutorial to make it a little more condensed than the data you saw before. Want to look at it? Click the blue box below.

::: {.callout-note collapse="true"}
## Click this to see our data!

```{r}
#| echo: false
#| output: true
library(DT)
library(knitr)
datatable(Bonneville_chinook)
#kable(Bonneville_chinook)
```
:::

Wow that's a lot of numbers! This is a HUGE amount of data. Notice how you can scroll on the data and there are 9 separate pages which show new entries.

### How to read the data table

Let's learn about what some of this data means. First, the table that you see when you click the blue rectangle above is called a **data table**. It contains a bunch of numbers which tell us how many fish crossed the Bonneville Dam on any given day.

#### Reading Dates

::: panel-tabset
## Question

On the top of the data table, you'll see bolded numbers like **1/1**, **1/2**, etc. Do you have a guess what those might mean? Discuss with your neighbor and then click the tab above to see the answer.

![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/data_screenshot.png)

## Answer

Those numbers are referring to dates! For example, *1/1* is January 1. But, they don't include the year. Can you spot where the year is in the data?
:::

::: panel-tabset
## Check for understanding

::: question
**Can you find how many fish crossed the Bonneville Dam on April 1 in 2022?**

::: choices
::: choice
0
:::

::: {.choice .correct-choice}
57
:::

::: choice
30495
:::
:::
:::

## Hint

On the far left side of the data, you should see the year. Find 2022 and then find **4/1** on the top. What number is underneath **4/1** in the 2022 row?
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Finding the maximum fish crossings in a year

::: panel-tabset
## Question

What is the **maximum** number of fish that crossed the Bonneville Dam in **one** day in 2021?

## Hint

See if you can find the **biggest** number in the 2021 row. If it seems too hard, scroll down past this question to learn an easy way to do this with the computer!
:::

Were you able to figure out the maximum number of fish that crossed the Bonneville Dam in one day in 2021? It was probably pretty annoying to have to look through all the numbers...

Luckily, the computer can make this task much easier! Try running the code below. It will find the maximum number in 2021. If you want to learn more about how it works, click the "Learn more" tab.

::: panel-tabset
## Code editor

**Press** the green play button.

```{webr-r}
max(Bonneville_chinook[2,])
```

Do you see the number 18848 pop out after you run the code? That's the largest number of fish that crossed the Bonneville dam in 2021 in a day!

## Learn more

Here's the code we're using again:

```{r}
#| eval: false
max(Bonneville_chinook[2,])
```

Do you recognize any words in the code?

-   [max]{style="color:#4758AB"}: This is called a "function". It tells the computer to find the max value.

-   [Bonneville_chinook]{style="color:darkblue"}: This tells the computer to look in our data called `Bonneville_chinook`

-   [2]{style="color:red"}: This tells the computer to look specifically at the **second** row of the the data, which is the 2021 row.

## Challenge

Want to try using the code yourself? See if you can figure out how to find the maximum value in 2019. Edit the code in the code editor below:

```{webr-r}
max(Bonneville_chinook[2,])
```

Hint: The "2" tells the computer which row to look at. How many rows down is 2019?

## Answer

```{webr-r}
max(Bonneville_chinook[4,])
```
:::

So the largest number of fish that crossed the Bonneville dam in 2021 in a day is 18848!

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Finding the total number of fish that cross the Bonneville dam each year

What if you wanted to know how many **total** fish crossed the dam this year, compared to 50 years ago? We can use the computer to answer that question too!

::: {.callout-warning collapse="false" appearance="simple"}
First, let's make a prediction. Think about what you've learned about dams and how they impact fish trying to get past them.

Do you think there are **more** fish or **less** fish in 2022 compared to 1972 (50 years before)? Talk to your neighbor about your predictions!
:::

When you're ready to check your answer, run the code below. It will find the **sum** of the row with 2022 data and 1972 data

::: panel-tabset

## Code editor 

```{webr-r}
rowSums(Bonneville_chinook[1,])

rowSums(Bonneville_chinook[51,])
```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Graphing 

Another way we can look at this data is by graphing it. The computer can help us a lot with this too. 

We're going to make a graph of the **total number of Chinook** that cross the Bonneville **each year**. 

Below this, we have code to create graphs of all the data we were looking at before. **Press** the green run code button to see the graph. There are options to look at a graph with and without a connecting line between the points. 

::: panel-tabset
## Graph without connecting line

```{webr-r}
#| read-only:true
y_max <- max(Bon_chinook_sum$sum_of_rows_100)

ggplot(data = Bon_chinook_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  labs(title = "Number of Chinook Crossings per Year at Bonneville Dam from 1938-2023",
       x = "Year",
       y = "Number of Chinook Crossing (in 1000s)") + 
      scale_x_continuous(breaks = seq(1938,2023,5)) +
      #scale_x_continuous(breaks = scales::pretty_breaks(n=10)) + 
      scale_y_continuous(breaks = seq(0,y_max,100))
```

## Graph with Connecting Line

```{webr-r}
#| read-only:true
y_max <- max(Bon_chinook_sum$sum_of_rows_100)

ggplot(data = Bon_chinook_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  geom_line(color = "salmon") +
  labs(title = "Number of Chinook Crossings per Year at Bonneville Dam from 1938-2023",
       x = "Year",
       y = "Number of Chinook Crossing (in 1000s)") + 
      scale_x_continuous(breaks = seq(1938,2023,5)) +
      #scale_x_continuous(breaks = scales::pretty_breaks(n=10)) + 
      scale_y_continuous(breaks = seq(0,y_max,100))
```

## Change the graph color! 

Want to try changing the color of the line and the points? 

In the code chunk below, replace the red lines ____ with the color you want for the connecting line and the points. Make sure to write your color *inside* the quotes `""`. Here's an example: `pointColor = "red"`

Here are some color options you can try: 

    -   "red"
    -   "green"
    -   "purple"
    -   "salmon"
    -   "darkblue"
    -   "orange"

**Type** in your colors below and then **press** run code. 

```{webr-r}
pointColor = "______"

lineColor = "_____"

```

Now that you've chosen the colors, you can run the graph code again. **Press** run code right below this text. 

```{webr-r}
#| read-only:true
y_max <- max(Bon_chinook_sum$sum_of_rows_100)

ggplot(data = Bon_chinook_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point(color= pointColor) +
  geom_line(color = lineColor) +
  labs(title = "Number of Chinook Crossings per Year at Bonneville Dam from 1938-2023",
       x = "Year",
       y = "Number of Chinook Crossing (in 1000s)") + 
      scale_x_continuous(breaks = seq(1938,2023,5)) +
      #scale_x_continuous(breaks = scales::pretty_breaks(n=10)) + 
      scale_y_continuous(breaks = seq(0,y_max,100))
```

:::

::: {.callout-warning collapse="false" appearance="simple"}
**Stop and think** 

-   What do you see? 
-   What does it mean? 
-   What do you wonder? 

:::

**Note to teachers** At this point I recommend you check out THIS PRESENTATION to explore what the graphs mean in your class! 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Congratulations!!

You learned how you can use the computer to look at large amounts of numbers and data. But, data doesn't tell us everything! 

::: {.callout-warning collapse="false" appearance="simple"}

**Brainstorm**

-   What questions do you have after looking at this data? 
-   How could you find the answer to those questions?
-   Are there **other** ways you could learn about the impact of the dam **other than** looking at data? 
    
    -   How would you do that? 
          
    -   Possible methods: interviews, online research, looking at pictures of the dam and surronding areas, visiting the dam, learning about salmon biology
    
-   What do the data/numbers **not** tell us? 

:::

### Want to learn more

This is the end of the tutorial but there's lots more resources to explore!

-   Click the "More Graphs!" button to see more graphs of Steelhead and Chinook species at the Bonneville and Dalles dams. Feel free to use these in your classroom. 

-   Additionally check out the linked lesson plans for more resources to teach about salmon and the Bonneville Dam!

<button id="continue-button" class="btn btn-primary float-start me-2">More Graphs!</button>
</div>

<div class="tutorial-part" style="display: none;">

## Graphs of other species and locations

Here are graphs of other species (Chinook and Steelhead) at other dams (Dalles and Bonneville) as well which you can take a look at! 

**Press** run code on each of the code chunks below to see different graphs. 

### Chinook Crossings at the Dalles

::: panel-tabset
## Graph without connecting line

```{webr-r}

x_min <- min(Dalles_chinook_sum$year)
y_max <- max(Dalles_chinook_sum$sum_of_rows_100)
ggplot(data = Dalles_chinook_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  #geom_line(color = "darkgreen") +
  labs(title = "Number of Chinook Crossings per Year at the Dalles 1957-2023",
       x = "Year",
       y = "Number of Chinook Crossings (in 1000s)", 
       theme_classic()) + 
  scale_x_continuous(breaks = seq(x_min,2023,5)) + 
  scale_y_continuous(breaks = seq(0,1100,100))
```

## Graph with connecting line

```{webr-r}
x_min <- min(Dalles_chinook_sum$year)
y_max <- max(Dalles_chinook_sum$sum_of_rows_100)
ggplot(data = Dalles_chinook_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  geom_line(color = "darkgreen") +
  labs(title = "Number of Chinook Crossings per Year at the Dalles 1957-2023",
       x = "Year",
       y = "Number of Chinook Crossings (in 1000s)", 
       theme_classic()) + 
  scale_x_continuous(breaks = seq(x_min,2023,5)) + 
  scale_y_continuous(breaks = seq(0,1100,100))

```
:::

### Steelhead Crossings at the Bonneville Dam

::: panel-tabset
## Graph without connecting line

```{webr-r}
x_min <- min(Bon_steel_sum$year)
y_max <- max(Bon_steel_sum$sum_of_rows_100)
ggplot(data = Bon_steel_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  labs(title = "Number of Steelhead Crossings per Year at Bonneville Dam 2003-2023",
       x = "Year",
       y = "Number of Steelhead Crossings (in 1000s)", 
       color = "darkgreen") +
     scale_x_continuous(breaks = seq(x_min,2023,2))  +
     scale_y_continuous(breaks = seq(0,175,25))
ggsave(filename="Steelhead_Bonneville_Graph_noline.jpg",  plot=last_plot(),path="output", width=2500, height=1200, units="px")
```

## Graph with connecting line

```{webr-r}
x_min <- min(Bon_steel_sum$year)
y_max <- max(Bon_steel_sum$sum_of_rows_100)
ggplot(data = Bon_steel_sum, aes(x = year, y = sum_of_rows_100)) +
  geom_point() +
  geom_line(color = "orange") +
  labs(title = "Number of Steelhead Crossings per Year at Bonneville Dam 2003-2023",
       x = "Year",
       y = "Number of Steelhead Crossings (in 1000s)", 
       color = "darkgreen") +
     scale_x_continuous(breaks = seq(x_min,2023,2))  +
     scale_y_continuous(breaks = seq(0,175,25))
ggsave(filename="Steelhead_Bonneville_Graph_noline.jpg",  plot=last_plot(),path="output", width=2500, height=1200, units="px")
```
:::


<button id="continue-button" class="btn btn-primary float-start me-2">The End</button>
</div>

<div class="tutorial-part" style="display: none;">

The End!

![From.giphy.com](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNnJkNnowYzFvYW45bXU4bDk2Mjd2b3VmZnVvMW0zdDB5d3Y1bDhkciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fxsqOYnIMEefC/giphy.gif)
