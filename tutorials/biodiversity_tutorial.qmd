---
title: "Biodiversity tutorial"
author: Grace, edited for web version by Olivia
filters: 
  - webr
  - naquiz
df-print: kable

format: 
  html: 
    toc: true
    self-contained: false
---

<script>
console.log("Script loaded");
console.log("Button clicked");
document.addEventListener("DOMContentLoaded", function() {
    let currentPartIndex = 0;
    const parts = document.querySelectorAll(".tutorial-part");
    const buttons = document.querySelectorAll("button[id^='continue-button']");
    const headerHeight = document.querySelector("header") ? document.querySelector("header").offsetHeight : 0;
    const sidebarLinks = document.querySelectorAll("#quarto-margin-sidebar .sidebar a"); // Updated selector

 // Log the selected elements
    console.log('Tutorial parts:', parts);
    console.log('Continue buttons:', buttons);

    // Hide all tutorial parts except the first one
    parts.forEach(function(part, index) {
        if (index !== 0) {
            part.style.display = "none";}});
    
    // Function to scroll to the top of the element, accounting for a fixed header
      function scrollToElement(element) {
          const elementTop = element.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
              top: elementTop - headerHeight,
             behavior: "smooth"
         });
     }

    
    // Add click event listeners to each button
    buttons.forEach(function(button, index) {
        button.addEventListener("click", function() {
            if (currentPartIndex < parts.length - 1) {
                parts[currentPartIndex].style.display = "block";
                buttons[currentPartIndex].style.display = "none";
                currentPartIndex++;
                parts[currentPartIndex].style.display= "block";
                 // Jump to the id anchor for the current section
         //   window.location.hash = parts[currentPartIndex].id;
        // Scroll to the top of the current section
                scrollToElement(parts[currentPartIndex]);
             // Adjust scroll position to account for the height of the navbar
              //   window.scrollBy(0, 10000);
                } else {
                alert("End of tutorial");}});});});


  // Add click event listeners to sidebar links
  
 //    sidebarLinks.forEach((link, index) => {
//           link.addEventListener("click", function(event) {
//               event.preventDefault(); // Prevent default anchor behavior

            // Hide current part and button
            //parts[currentPartIndex].style.display = "none";
           // buttons[currentPartIndex].style.display = "none";

            // Move to the part corresponding to the sidebar link
 //           currentPartIndex = index;
 //           parts[currentPartIndex].style.display = "block";

            // Scroll to the current part
//            scrollToElement(parts[currentPartIndex]);
//        });
//      });
//    });

</script>


```{webr-r}
#| context: setup
#| warning: false
library(tidyverse)
library(knitr)

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Biodiversity_Index.csv"
download.file(url, "Biodiversity_Index.csv")

Biodiversity_Index <- read_csv("Biodiversity_Index.csv")

#Fix spelling errors in the dataset
#Biodiversity_Index <- Biodiversity_Index |> 
#  mutate(Biome=recode(Biome, 'Temperate Conferous Forest' = 'Temperate Coniferous #Forest', 
#                     'Tropical and Subtropical moist broadleaf forest' = 'Tropical #Forest'), 
#         Taxa=recode(Taxa, 'Terrestial Invertebrate'='Terrestrial Invertebrates', 
#                     'Terrestial Plant' = 'Terrestrial Plants',
#                     'Terrestial Plants' = 'Terrestrial Plants'))

Biodiversity_Index <- Biodiversity_Index[-c(2)]

names(Biodiversity_Index)[names(Biodiversity_Index)=='...1'] <- 'entry'

```

```{r}
#| include: false
library(tidyverse)
library(knitr)

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Biodiversity_Index.csv"
download.file(url, "Biodiversity_Index.csv")

Biodiversity_Index <- read_csv("Biodiversity_Index.csv")

Biodiversity_Index <- Biodiversity_Index[-c(2)]

names(Biodiversity_Index)[names(Biodiversity_Index)=='...1'] <- 'entry'

```

## Introduction

Today we'll be looking at biodiversity!

<div class="tutorial-part" style="display: block;">

## What is R and what can it do?

R is a programming language that helps us work with large amounts of data.

-   You can import data from various sources,clean and process it, perform statistical analyses and generate reports or visualizations

-   We are going to be utilizing the data visualization aspect by creating graphs from a big data set

-   [Fun Fact:]{.underline} R is like a fancy calculator


### You can use R!

This tutorial lets you use R to work with data. Throughout the tutorial, there are gray boxes with a green "run code" button. These are called code chunks. You can type commands into these boxes and it will tell the computer to do things! Let's try it out.

**Press** the Green Play button on the top right of the code chunk.

(the code chunk is the grey rectangular box below)

```{webr-r}
4+3
```

**You Try:** Replace `4+3` with any math equation

**Press** Green Play Button when done

```{webr-r}
4+3
```

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


## Data Set

We are going to be using data from BioTIME (<https://biotime.st-andrews.ac.uk>)

-   We are specifically looking at data on the Biodiversity of Terrestrial Plants and Invertebrates in the Temperate Coniferous Forest and in Tropical Forest.

We've pre-loaded a data set from the biotime data into this tutorial

-   `Biodiversity_Index` is the name of the Data set.

Lets look at it!

::: {.callout-note collapse="true"}
## Click this to see our data!

::: panel-tabset
## Datatable

```{r}
#| echo: false
#| output: true
library(DT)
options(DT.options = list(
#  bPaginate = FALSE, 
  pageLength = 148, 
  lengthMenu=c(10,50,100,148)
))
datatable(Biodiversity_Index)
#kable(Biodiversity_Index)
```

## Code to create table (optional)

The `kable()` function opens a data set so you can look at it.

**Press** Green play button to run the code

```{webr-r}
#| df-print: kable
kable(Biodiversity_Index)
```
:::
:::

This is A LOT of data!! It can be hard to understand by just looking at it. But luckily we can use R/the computer to better understand the data. That's what we'll do in the next sections. 

First, though, let's see what we can observe just by looking at the data. 

**Stop and Think:**

::: panel-tabset
## Question

::: question
**How many columns does this table have? How many rows?**

::: choices
::: choice
148 columns and 11 rows
:::

::: choice
11 columns and 10 rows
:::

::: {.choice .correct-choice}
11 columns and 148 rows
:::

::: choice
52 columns and 14 rows
:::
:::
:::

## Hint

At the top you'll see the names of all the columns. Try scrolling all the way to the bottom of the data to see how many rows there are.
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Choosing our columns

We are going to make graphs that represent biodiversity, so we want to look at **biodiversity Index** and the **number of different species**.

**Stop and Think:**

::: panel-tabset
## Question

::: question
**Which Columns do you think represent these two things?**

::: choices
::: choice
`Taxa` and `total`
:::

::: choice
`Biome` and `total`
:::

::: choice
`entry` and `YEAR`
:::

::: {.choice .correct-choice}
`index` and `numspecies`
:::
:::
:::

## Hint

Go back to the `Biodiversity_Index` data set code chunk to look at the columns again! At the top you'll see the names of all the columns. Each column is separated by a vertical line \| .
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Narrowing down the data

We've determined that we want to work with the `index` and `numspecies` columns. 

-   The `index` column represents the biodiversity index per year.

-   The `numspecies` column represents the different number of species observed per year.

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Choosing the biome and taxa

Now we want to look closer at each biome and taxa that the data set has. In order to make a better graph, we want to narrow down the data we're looking at. We'll need to choose a biome and taxa to focus on. 

**Stop and Think**

*How many different biomes does the data set have?*

(Go back to look at the `Biodiversity_Index` data set to try to find the answer)

-   notice this is HARD to find by just looking at the data set, especially if the data set is huge.

Let's use R to solve this question instead! The `unique()` function list unique values within a column, so it shows us all the different values.

::: panel-tabset
## Code editor

**Press** Green play button to run the code

```{webr-r}
unique(Biodiversity_Index$Biome)
```

## Answer

There are two Biomes in this Data Set; `Temperate Coniferous Forest` and `Tropical Forest`.
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Unique Taxa

**Stop and Think**

*How many different taxa does the data set have?*

-   Now you know what code to use to find unique values within a column. See if you can reuse the code to find the unique values for the `Taxa` column.

::: panel-tabset
## Code editor

**Edit** this code to find the unique values for the `Taxa` column. Replace the red line ______ with the column name we're looking at. 

**Press** Green play button to run the code chunk once you edit the code.

```{webr-r}
unique(Biodiversity_Index$"________")
```

## Hint

The code should look like `unique(Biodiversity_Index$"Taxa")`

## Answer

There are two different taxa in this data set: `Terrestrial Plants` and `Terrestrial Invertebrates`.
:::

Now let's combine all the columns we just looked at: the `index`,`total`,`Biome`, and `Taxa` columns. Let's also add the `YEAR` column, since it's the independent variable we will be using in our graphs. Below, we'll look at just the columns we want to graph:

**Press** Green play button to run the code chunk

```{webr-r}
print(Biodiversity_Index[,c("YEAR","index","numspecies","Biome","Taxa")], n=148)
```

Now that you have extracted the columns you need, let's graph! 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Creating a Graph

We have A LOT of data. It would be really hard to graph by hand. Luckily, we can use the computer (R) to graph it.

Our goal is to create a graph that tracks the biodiversity of a specific location over time. We have two methods of measuring biodiversity: the **number of species** and the **biodiversity index**. We will also narrow down our data by choosing a specific **biome** and **taxa**. 

Go through the following steps to create your graph. 

### Step 1: Choosing a Biome and Taxa

First, choose a biome and taxa. 

Here are your options again: 

::: columns
::: {.column width="50%"}

**Biomes**

-   Temperate Coniferous Forest

-   Tropical Forest

:::


::: {.column width="50%"}

**Taxa**

-   Terrestrial Plants

-   Terrestrial Invertebrates

:::
:::

Now, you'll need to tell the computer what you chose. In the code chunk below, type in the name of your Biome and Taxa. Replace the red line ______ and make sure you leave the quotes "". Make sure you spell everything correct and use the exact capitalization in the dataset! Then click "run code".

::: panel-tabset

## Code editor 

```{webr-r}
myBiome = "____________"

myTaxa = "____________"

```

## Example
```{webr-r}
myBiome = "Temperate Coniferous Forest"

myTaxa = "Terrestrial Plants"

```

## Check your work

Run this code. If it outputs the Biome and Taxa you chose spelled and capitalized EXACTLY as they are spelled in the data, then you can continue!

```{webr-r}
myBiome
myTaxa
```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 2: Choosing Your X and Y variabless

In the previous step, you narrowed down **what specific** data you want to look at. 

Now, you'll need to choose what **variables** you want to plot on the graph. Recall our goal is to plot the **biodiversity index OR number of species** over **time**.

**Stop and Think** 

::: panel-tabset

## Question

::: question

*What is the X variable? What is the Y variable?*

::: choices
::: {.choice .correct-choice}
**X variable:** time; **Y variable:** biodiversity index/number of species
:::
::: choice
**X variable:** biodiversity index/number of species; **Y variable:** time
:::
:::
:::

## Hint

Remember: 

   -   The **x variable** is the independent variable. It is NOT affected by the other variable. It's sort of like the "cause" variable.
   
   -   The **y variable** is the dependent variable. It IS affected by the other variable. It is sort of like the "effect" variable.
   
## Reasoning

The x variable is **time** because it is independent - it will change and progress no matter what! 

The y variable is **biodiversity index or number of species** (whichever you choose) because it is dependent on time. As time moves forward, the biodiversity index will also change. 

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

#### You Choose your Variable

Now, you get to input which y variable you want to graph - either **biodiversity index** or **number of species**.

Recall the column names for each of these variables: `index` and `numspecies`. Type in the name of your y variable below. Replace the red line _____ with its name. Be sure to spell it exactly as it is spelled in the data! Then click "run code".

::: panel-tabset
## Code editor

```{webr-r}
yvar="___________"
```

## Example

```{webr-r}
yvar="numspecies"
```
:::

Everyone's x variable will be **year** so you don't need to change that. 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 3: Choosing the type of graph

In this tutorial, we're going to make a **bar graph**. A bar graph allows us to see how biodiversity changes over time in a simple format. Bar Graphs are used to display and compare the values of different categories and color can help distinguish the different categories.

If you want to try making a different kind of graph, refer to the [**Challenge coding** section](#sec-codechallenge). 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


### Step 4: Assigning Color to Bar Graph

You can now choose a custom color for your bar graph. Here are some color options:

-   `"darkseagreen"`

-   `"salmon3"`

-   `"seagreen"`

-   `"brown"`

-   `"blue"`

-   `"yellow"`

-   `"purple"`

Now, type the color name in place of the red line ______. Be sure to keep it inside the quotes `""`.Then click "run code".


::: panel-tabset
## Code editor

```{webr-r}
graphColor = "_______"

```

## Example

```{webr-r}
graphColor = "salmon3"

```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 5: Adding a Title and Axis Labels

Now, you can add a title and axis labels to your graph.

-   A good graph should always have at least a Title and Axis labels (X-Axis, Y-axis)

In the code chunk below, add a Title, Subtitle, x-axis label, and y-axis label. Then click "run code". 

Be sure to keep quotations `""` around name. Example : `xLabel="year"`

::: panel-tabset
## Code editor

```{webr-r}
titleName = "________"

subtitleName = "________"

xLabel = "_______"

yLabel = "_______"
```

## Example

```{webr-r}
titleName = "Number of Terrestrial Invertebrate Species"

subtitleName = "In Temperate Coniferous Forest "

xLabel= "Year"

yLabel = "Number of Species"
```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Step 6: Create the graph!

Now, you can create your graph! Click "run" on the code chunk below

::: panel-tabset

## Code editor 

```{webr-r}
#| read-only: true
Biodiversity_Index|>
  filter(Biome==myBiome, Taxa==myTaxa) |>
  ggplot(aes_string(x="YEAR", y= yvar )) + 
  geom_col(fill=graphColor, color="grey37") + 
  labs(title = titleName, 
       subtitle = subtitleName, 
       x= xLabel, y= yLabel) +
  theme_linedraw()+theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```

## Troubleshooting: error message

Did you get an error message in red?

-   If the graph also displayed and looks right, don't worry about the error message!

-   If the graph is not displaying, go back and make sure you ran all the code chunks previously where you defined the variables and labels.

    -   Did you put everything in quotes when you defined the variables and labels?

-   You don't need to edit this code at all, just the code where you define variables and labels

-   If it still isn't working or if you accidentally deleted something, you can refresh the page to restart.

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Congratulations!

**You have created a data visualization from a big data set!**

**Stop and Think**:

1.  *What were some challenges?*

2.  *What have you learned about Data Science?*

3.  *What kinda of data would you want to look at in Posit Cloud?*

4.  *What kind of graphs do you want to make or see more of?*

If you want to learn more about the code we used to create the graph, you can click "continue" to go to the Code Challenge. This is OPTIONAL. Otherwise you are all done! Great work!!

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Code challenge {#sec-codechallenge}

In this code challenge, we'll have you directly edit the entire code chunk used to create your graph. Previously, you inputted your variables and we then put them into the graph code. So this time, you get to put your variables directly into the graph code and learn about what each command does! 

### Step 1: Selecting a data set to graph

Lets look at line 1 : `Biodiversity_Index |>`

-   This line is telling the computer which data set we want to create a graph from

-   You do not need to make any changes to this line.

### Step 2: Identifying which `Biome` and which `Taxa`

Looking at Line 2 : `filter(Biome=="Insert Biome Name Here", Taxa=="Insert Taxa Name Here")`

-   This is line is telling R which specific rows you want displayed in your graph based on the categories you tell it.

-   The `filter()` function picks rows you want to keep based on the instructions you give it

-   Since there are multiple biomes and taxa within the data set we need to specify which ones we want to graph

**You Try:**

Based on your assigned graph insert the corresponding `Biome` and `Taxa` in the code chunk below.

Be sure you spell the Biome and Taxa exactly as it is spelled in the dataset with proper capitalizations. Here are the options:

-   Biome:
    -   "Temperate Coniferous Forest"
    -   "Tropical Forest"
-   Taxa:
    -   "Terrestrial Invertebrates"
    -   "Terrestrial Plants"

::: panel-tabset
## Code editor

DO NOT **Press** play!

```{webr-r}
filter(Biome=="Insert Biome Name Here", Taxa=="Insert Taxa Name Here") 
```

Make sure to keep your answers in the quotations`""`!

## Example

```{webr-r}
filter(Biome=="Savannah Desert", Taxa=="Mammals") 
```
:::

### Step 3: Choose your X and Y variables

Looking at Line 3: `ggplot(aes(x= YEAR, y="numspecies or index"))`

-   The `ggplot()` function is used to create a wide variety of data visualizations, including scatter plots,bar graphs, line graphs, and many others.

-   Within the `ggplot()` function we use the `aes()` function to assign the features of the graphs ( X and Y Values)

-   The X value (`x=YEAR`) will be the same for all eight graphs, so **DO NOT** change that part

**You Try:**

-   Based on your assigned graph insert the corresponding `y` value in the code chunk below

-   This should be either `numspecies` if your graph is looking at the number of species or `index` if your graph is looking at Biodiversity Index

    **NOTE:** In this part it important to NOT include quotations `""`. Example: `y=numspecies` or `y=index`

::: panel-tabset
## Code editor

DO NOT **Press** Green play button

```{webr-r}
ggplot(aes(x= YEAR, y=numspecies or index))
```

## Example

```{webr-r}
ggplot(aes(x= YEAR, y=numspecies))

```
:::

### Step 4: Choosing the type of graph

Looking at line 5, this is where we choose the type of graph we want to use. Currently it says `geom_col(________)` with some random words in the parenthesis that you can ignore for now. 

You can change the part where it says `col` to adjust the type of plot. For example, you can create a scatter plot by replacing `col` with `point`. Here's how that would look: 

::: panel-tabset
## Scatterplot

```{webr-r}
geom_point(color= "Insert Color Name Here")

```

## Bar plot

```{webr-r}
geom_col(fill= "Insert Color Name Here", color="grey37")

```
:::


### Step 5: Assigning corresponding color to the bars

Looking at line 5: `geom_col(fill= "Insert Color Name Here", color="grey37")`

-   The `geom_col` function is used to tell R that we want to graph a Bar graph

-   Bar Graphs are used to display and compare the values of different categories and color can help distinguish the different categories.

-   Within the `geom_col()` function we can specify the color of the bars using the code `fill="Name of Color"`

-   Ignore `color="grey37"` that is specifying the color for the border of the bars. **DO NOT** change that.

You can now choose a custom color for your bar graph. Here are some color options:

-   `"darkseagreen"`

-   `"salmon3"`

-   `"seagreen"`

-   `"brown"`

-   `"blue"`

-   `"yellow"`

-   `"purple"`

**Your Turn:**

Once you've identified which color you need to use, insert the color where it says `"Insert Color Name Here"`.

**NOTE:** It is important to keep the quotations `""`

::: panel-tabset
## Code editor

```{webr-r}
geom_col(fill= "Insert Color Name Here", color="grey37")

```

## Example

```{webr-r}
geom_col(fill= "salmon3", color="grey37")

```
:::

### Step 5:

Looking at lines 5,6,and 7 : `labs(title = "Insert Title Name", subtitle = "Insert Subtititle", x= "Year", y= "Number of species or Biodiversity index")`

-   The `labs()` function is used to specify labels on the graph (Title, Subtitle, Axis labels, Captions, and more)

-   A good graph should always have at least a Title and Axis labels (X-Axis, Y-axis)

**Your Turn:**

1.  Insert the Title of your graph where it says `"Insert Title Name"`

2.  Insert the subtitle of your graph where it says `"Insert Subtitle"`

3.  Keep the X-axis labeled `"Year"` DO NOT Change this code.

4.  Pick `"Number of species"` or `"Biodiversity index"` as your Y-Axis label based on your corresponding graph.

    **NOTE**: keep quotations `""` around name. Example : `x="year"`

::: panel-tabset
## Code editor

DO NOT **Press** Green Play button

```{webr-r}
labs(title = "Insert Title Name", subtitle = "Insert Subtititle", x= "Year", y= "Number of species or Biodiversity index")
```

## Example

```{webr-r}
labs(title = "Number of Terrestrial Invertebrate Species", 
       subtitle = "In Temperate Coniferous Forest ",
       x= "Year", y= "Number of Species")
```
:::

### Step 6: Putting all the lines together!

Now that you have edited all the necessary code lines, lets put them together to create our graphs

**Your Turn:**

-   Look back at your work in steps 1-5. Edit the following code based on your work in those steps.

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Insert Biome Name Here", Taxa=="Insert Taxa Name Here") |>
  ggplot(aes(x= YEAR, y= "numspecies or index" )) + 
  geom_col(fill= "Insert Color Name Here", color="grey37") + 
  labs(title = "Insert Title Name", 
       subtitle = "Insert Subtititle", 
       x= "Year", y= "Number of species or Biodiversity index") +
  theme_linedraw()+theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```


If you're having trouble with the code, click continue to see the answers and edit your code accordingly. 


::: {.callout-note collapse="true"}
## Click this to see the answers

::: panel-tabset
## Number of Species Temperate Plants

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Temperate Coniferous Forest", Taxa=="Terrestrial Plants")|>
ggplot(aes(x=YEAR,y= numspecies)) + geom_col(fill= "darkseagreen", color= "grey37")+
  labs(title = "Number of Terrestrial Plant Species", 
       subtitle = "In Temperate Coniferous Forest", 
       x= "Year", y= "Number of species") + theme_linedraw() + 
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5)) 
```

## Number of Species Temperate Invertebrates

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Temperate Coniferous Forest", Taxa=="Terrestrial Invertebrates")|>
  ggplot(aes(x=YEAR, y= numspecies)) +geom_col(fill= "salmon3", color= "grey37") +
  labs(title = "Number of Terrestrial Invertebrate Species", 
       subtitle = "In Temperate Coniferous Forest ",
       x= "Year", y= "Number of Species") +theme_linedraw() +
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5)) 
```

## Diversity Index Temperate Plants

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Temperate Coniferous Forest", Taxa== "Terrestrial Plants")|>
  ggplot(aes(x= YEAR, y= index)) + geom_col(fill= "darkseagreen", color="grey37") + 
  labs(title = "Biodiversity Index of Terrestrial Plants", 
       subtitle = "In Temperate Coniferous Forest",
       x= "Year", y= "Biodiversity Index") +
  theme_linedraw()+
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5)) 
```

## Diversity Index Temperate Invertebrates

```{webr-r}

Biodiversity_Index|>
  filter(Biome=="Temperate Coniferous Forest", Taxa=="Terrestrial Invertebrates")|>
  ggplot(aes(x=YEAR, y= index)) +geom_col(fill= "salmon3", color= "grey37") +
  labs(title = "Biodiversity Index of Terrestrial Invertebrates", 
       subtitle = "In Temperate Coniferous Forest", 
       x= "Year", y= "Biodiversity Index") + theme_linedraw() +
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```

## Number of Species Tropical Plants

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Tropical Forest", Taxa=="Terrestrial Plants")|>
  ggplot(aes(x=YEAR,y= numspecies)) +geom_col(fill= "seagreen", color= "grey37")+
  labs(title = "Number of Terrestrial Plant Species",
       subtitle = "In Tropical Forest", 
       x= "Year", y= "Number of species") + theme_linedraw() + 
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```

## Number of Species Tropical Invertebrates

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Tropical Forest", Taxa=="Terrestrial Invertebrates")|>
  ggplot(aes(x=YEAR,y= numspecies)) +geom_col(fill= "brown", color= "grey37")+
  labs(title = "Number of Terrestrial Invertebrate Species",
       subtitle = "In Tropical Forest", 
       x= "Year", y= "Number of species") + theme_linedraw() + 
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5)) 
```

## Diversity Index Tropical Plants

```{webr-r}
Biodiversity_Index|>
  filter(Biome=="Tropical Forest", Taxa== "Terrestrial Plants")|>
  ggplot(aes(x= YEAR, y= index)) + geom_col(fill= "seagreen", color="grey37") + 
  labs(title = "Biodiversity Index of Terrestrial Plants", 
       subtitle = "In Tropical Forest", 
       x= "Year", y= "Biodiversity Index" ) +
  theme_linedraw()+
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```

## Diversity Index Tropical Invertebrates

```{webr-r}

Biodiversity_Index|>
  filter(Biome=="Tropical Forest", Taxa=="Terrestrial Invertebrates")|>
  ggplot(aes(x= YEAR, y= index)) + geom_col(fill= "brown", color="grey37") + 
  labs(title = "Biodiversity Index of Terrestrial Invertebrates", 
       subtitle = "In Tropical Forest", 
       x= "Year", y= "Biodiversity Index" ) +
  theme_linedraw()+
  theme(plot.title = element_text( hjust= .5, face = "bold"), plot.subtitle = element_text(hjust = .5))
```
:::
:::

## Congratulations!\*\*

**You have created a data visualization from a big data set!**

<button id="continue-button" class="btn btn-primary float-start me-2">The End</button>
</div>

<div class="tutorial-part" style="display: none;">

Nice work!


```{r}
#| echo: false
#| results: asis
#| output: false
create_buttons <- function(next_topic = "#") {
  if (is.null(next_topic)) {
    next_button <- ""
  } else {
    next_button <- glue::glue('<a id="nextTopicButton" class="btn btn-danger disabled" href="{next_topic}" role="button">Next topic</a>')
  }
  button_section <- glue::glue('
<section id="buttons">
<button id="continueButton" class="btn btn-primary float-start me-2">Continue</button>
{next_button}
<button id="resetButton" class="btn btn-outline-warning btn-sm float-end">Start over</button>
</section>')
  
  cat(button_section)
}
create_buttons("https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/tutorials/salmon_tutorial.html")
```
