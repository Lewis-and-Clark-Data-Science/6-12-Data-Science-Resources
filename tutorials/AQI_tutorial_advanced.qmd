---
title: "AQI Part 2 - Custom Graphs"
filters: 
  - webr
  - naquiz

output: 
  html: 
    toc: true
    self-contained: false
    toc-expand: true
    sidebar: true

toc: true
toc-depth: 2
callout-icon: false
#execute: 
#  eval: false
---


<script>
console.log("Script loaded");

document.addEventListener("DOMContentLoaded", function() {
    let currentPartIndex = 0;
    const parts = document.querySelectorAll(".tutorial-part");
    const buttons = document.querySelectorAll("button[id^='continue-button']");
    const nextButton = document.getElementById("next-button");
    const headerHeight = document.querySelector("header") ? document.querySelector("header").offsetHeight : 0;
    const sidebarLinks = document.querySelectorAll("#quarto-margin-sidebar .sidebar a"); // Updated selector

    // Log the selected elements
    console.log('Tutorial parts:', parts);
    console.log('Continue buttons:', buttons);

    // Hide all tutorial parts except the first one
    parts.forEach(function(part, index) {
        if (index !== 0) {
            part.style.display = "none";
        }
    });

    // Function to scroll to the top of the element, accounting for a fixed header
    function scrollToElement(element) {
        const elementTop = element.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
            top: elementTop - headerHeight,
            behavior: "smooth"
        });
    }

    // Function to show a specific part
    function showPart(index) {
        if (index >= 0 && index < parts.length) {
            parts.forEach((part, idx) => {
                part.style.display = (idx === index) ? "block" : "none";
            });
            scrollToElement(parts[index]);
            currentPartIndex = index;
        }
    }
    
     // Function to show all parts up to a specific index
    function showPartsUpTo(index) {
        parts.forEach((part, idx) => {
            if (idx <= index) {
                part.style.display = "block";
            }
            if (idx > index){
            part.style.display = "none";
}
        });
        scrollToElement(parts[index]);
        currentPartIndex = index;
    }

    // Add click event listeners to each button
    buttons.forEach(function(button, index) {
        button.addEventListener("click", function() {
            if (currentPartIndex < parts.length - 1) {
                parts[currentPartIndex].style.display = "block";
                buttons[currentPartIndex].style.display = "none";
                currentPartIndex++;
                showPartsUpTo(currentPartIndex);
            } else {
                alert("End of tutorial");
            }
        });
    });

    // Listen for hash changes to navigate to the correct section
    window.addEventListener("hashchange", function() {
        const hash = window.location.hash;
        if (hash) {
            const targetPart = document.querySelector(hash);
            if (targetPart) {
                const targetIndex = Array.prototype.indexOf.call(parts, targetPart);
                showPartsUpTo(targetIndex);
                buttons.forEach((button, idx) => {
                  if (idx < targetIndex) {
                  button.style.display="none";}
                  if (idx >= targetIndex) {
                  button.style.display="block";
}
                  });
            }
        }
    });

    // Check the URL hash on page load
    const initialHash = window.location.hash;
    if (initialHash) {
        const initialTarget = document.querySelector(initialHash);
        if (initialTarget) {
          const intialIndex=Array.prototype.indexOf.call(parts, initialTarget);
            showPartsUpTo(initalIndex);
            buttons.forEach((button, idx) => {
                if (idx < initialIndex) {
                    button.style.display = "none";
                }
            });
        }
    }
    // Add click event listener to the new next button
    if (nextButton) {
        nextButton.addEventListener("click", function() {
            window.location.href = "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/tutorials/AQI_tutorial_advanced.html"; 
        });
    }
});

</script>

```{webr-r}
#| context: setup
library(tidyverse)

#Download USA AQI data from 2000 to 2023 from a file stored in github
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/aqi_usa_2000_2023.csv.zip"
download.file(url, dest="dataset.zip", mode="wb") 
usa_aqi_data<- unzip("dataset.zip", exdir = "./")|>
  read.csv()
#Note: in the future you could probably just use the link right from this website instead of going through github https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2023.zi

#Create global color labels for each category
colLabels <- c('Good', 'Moderate', 'Unhealthy','Unhealthy for Sensitive Groups', 'Very Unhealthy', 'Hazardous')

myColors <- c('seagreen','yellow', 'orange1', 'red','darkmagenta', 'darkred')

aqi_colors<- setNames(object=myColors, nm=colLabels)


# Define categories for the challenge section 
hazardous = 301
very_unhealthy = 201
unhealthy = 151
unhealthy_for_sensitive_groups = 101
moderate = 51
good = 0

```

```{r}
#| include: false
##| eval: false
library(tidyverse)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/aqi_usa_2000_2023.csv.zip"
download.file(url, dest="dataset.zip", mode="wb") 
usa_aqi_data<- unzip("dataset.zip", exdir = "./")|>
  read.csv()

#Note: in the future you could probably just use the link right from this website instead of going through github https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2023.zip
```

<div class="tutorial-part" style="display: block;">


## Introduction


Welcome to **Part 2 of the Air Quality Data Science Tutorials**! If you have not done Part 1 yet, [click here](AQI_tutorial.qmd) to complete that tutorial first - it will provide helpful background info about air quality and the basics of data science.

Part 2 will build off of the graphs created in Part 1 and allow you to customize them with your own locations as well as create different types of graphs. 

### Our Data Set

::: columns
::: {.column width="40%"}

This tutorial uses air quality data from [the EPA](https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI){target="_blank"} ranging from 2000-2023, and has data on all counties in the United States. The Air Quality Index (AQI) is calculated by looking at various pollutants including Particle Pollution (PM2.5 and PM10), Carbon Monoxide, Lead, Nitrogen Dioxide, Ozone, and Sulfur Dioxide. Here is a [link to the data](https://aqs.epa.gov/aqsweb/airdata/download_files.html#AQI){target="_blank"} and here is a [link to more information](https://aqs.epa.gov/aqsweb/airdata/FileFormats.html#_pollutant_standards){target="_blank"} about the data. 

Our data tells gives the highest recorded AQI value on a given day in a given location. 

The data set is very large, so we will not view it now, but there will be an option to view individual counties later in the tutorial. 

:::
::: {.column width="10%"}
:::
::: {.column width="50%"}

![From.https://www.earthdata.nasa.gov/topics/atmosphere/air-quality](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/airqualityimage.png){fig-align="center" fig-alt="air quality images of 6 cities" height="3in" fig-cap-location="margin"}
:::

:::


## Customizing your graphs!

In this tutorial, you can create graphs with various customizations. Here are your options: 

-   [make a scatterplot of AQI over time for any location(s)](#sec-scatterplot)

-   [make a tile plot and choose your own location(s)](#sec-tilemylocation)

-   [view raw data for any county](#sec-rawdata)

-   [Challenge - make a tile plot and customize the location, x axis, legend, and labels](#sec-codechallenge)

Choose one of the options above, or click "continue" to do all of them!

<button id="continue-button" class="btn btn-primary float-start me-2">Continue: scatterplot</button>
</div>

<div class="tutorial-part" style="display: none;">

## Create a scatter plot of AQI over time {#sec-scatterplot}

First, let's create a scatterplot! We're going to graph the number of **days per year** when the AQI was above a certain threshold. 

In other words, we'll graph the number of days when the AQI was red (or orange or green or whatever level you choose). Then, we'll see how this **data changes over time**, from 2020 to 2023.

To do this, we'll use a scatterplot. A scatterplot is a collection of points, where each point represents a data value. 

::: {.border-left}
**Stop and Think**

Before we start, what do you think the graph might look like? Discuss these questions with your neighbor: 

-   In Portland, do you think the air quality is getting **better** or **worse** since 2000? 

-   If we only look at **Unhealthy** AQI levels (red) in Portland, do you think there will be **more** or **less** total days of unhealthy air quality since 2000?
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 1: Choose your county {#sec-scatterplot1step}

First, you'll need to choose a county that you want to graph.

Here are your options, organized by state. Click through them and find the county you'd like to graph. You'll need to remember the exact spelling AND capitalization. 

::: {.callout-note collapse="true"}
## States and County Names 

```{r}
#| output: true
#| echo: false
##| eval: false

library(DT)
library(knitr)
usa_aqi_data|>
  select('State.Name','county.Name')|>
  unique()|>
  group_by(State.Name)|>
  datatable()
#usa_aqi_data|>
#  select('State.Name','county.Name')|>
#  unique()|>
#  group_by(State.Name)|>
#  kable()
```
:::

### Step 2: Add your county name to the code

Now, you'll tell the computer which county you chose.

**Important** make sure you spell the County name exactly as you found it in the table above, and be sure to use proper capitalization as well. 


::: panel-tabset 

## Code editor

**Type** your county name in the code chunk below. Replace the red line with the county but DON'T delete the quotes `""`. 

**Press** Run Code

```{webr-r}
myCounty = "__________"

```

## Example

```{webr-r}
myCounty = "Multnomah"

```
:::


<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 3: Choose which AQI level you want to graph

Now, you can choose which air quality level you'd like to graph. You can focus on any of the following: 

-   "Good"
-   "Moderate"
-   "Unhealthy for Sensitive Groups"
-   "Unhealthy"
-   "Very Unhealthy"
-   "Hazardous"

::: panel-tabset

## Code editor

**Type** the level you choose in the code chunk. Replace the red line and be sure to keep the quotes. 

**Press** Run code

```{webr-r}
myLevel = "_______"
```

## Example

```{webr-r}
myLevel = "Unhealthy"
```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 4: Choose a color

Now you can choose a color for your points. Here are a few options. Otherwise go to [this link](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf){target="_blank"} for more options.

-   "red"
-   "green"
-   "blue"
-   "orange"
-   "pink"
-   "purple"
-   "yellow"

::: panel-tabset

## Code editor

**Type** your color name in the code chunk. Replace the red line. Use all lowercase and be sure to keep the quotes `""`.

**Press** run code

```{webr-r}
myColor = "_____"

```

## Example

```{webr-r}
myColor = "red"

```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 5: Create the graph!

Now you can create your graph! Click through the tabs at the top of the code editor to see more options for customizing your graph. 

::: panel-tabset

## Code editor

**Press** run code

```{webr-r}
myScatterplotData<- usa_aqi_data|>
  filter(county.Name==myCounty) |>
  mutate(Year=as.integer(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(Category = factor(Category, levels= colLabels)) |>
  filter(Category == myLevel)

myScatterplotData |>
  group_by(Year) |>
  count() |>
  
  ggplot(aes(x=Year, y=n))+
  geom_point(color=myColor) +
  labs(title = paste0("Number of days with AQI value ", myLevel, " from 2000-2023 in ", myCounty),
       x = "Year",
       y = paste0("Number of days with AQI value ", myLevel))+
  scale_x_continuous(breaks = seq(2000,2023, by=2))

```

## Add a line of best fit

Want to add a line of best fit? 

**Press** run code.

```{webr-r}
myScatterplotData<- usa_aqi_data|>
  filter(county.Name==myCounty) |>
  mutate(Year=as.integer(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(Category = factor(Category, levels= colLabels)) |>
  filter(Category == myLevel)

myScatterplotData |>
  group_by(Year) |>
  count() |>
  
  ggplot(aes(x=Year, y=n))+
  geom_point(color=myColor) +
  geom_smooth(method='lm', color=myColor)+
  labs(title = paste0("Number of days with AQI value ", myLevel, " from 2000-2023 in ", myCounty),
       x = "Year",
       y = paste0("Number of days with AQI value ", myLevel))+
  scale_x_continuous(breaks = seq(2000,2023, by=2))

```

## Compare two counties

Want to overlay 2 scatterplots and compare 2 different counties? 

**Replace** the red lines with your county names! Make sure you enclose them with quotes `""` and spell their names properly (refer back to [this table](#sec-tilemylocation)).

**Press** run code

```{webr-r}
myCounty = "______" 
myCounty2 = "______"

```

**Example**: 
```{r}
#| eval: false
myCounty = "Multnomah" 
myCounty2 = "Los Angeles"
```

Now, let's make the graph again:

**Press** Run code

```{webr-r}
myScatterplotData<- usa_aqi_data|>
  filter(county.Name==myCounty | county.Name==myCounty2) |>
  mutate(Year=as.integer(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(Category = factor(Category, levels= colLabels)) |>
  filter(Category == myLevel)

myScatterplotData |>
  group_by(Year, county.Name) |>
  count() |>
  
  ggplot(aes(x=Year, y=n, color=county.Name))+
  geom_point() +
  geom_smooth(method='lm')+
  labs(title = paste0("Days with AQI value ", myLevel, " from 2000-2023 in ", myCounty, " and ", myCounty2),
       x = "Year",
       y = paste0("Number of days with AQI value ", myLevel))+
  scale_x_continuous(breaks = seq(2000,2023, by=2))

```

## Troubleshooting

-   Run Code button not working: Make sure you wait until the green circle at the very top of this page says "Ready!" We have some code running in the background and the green circle indicates it has finished running. ![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/webrready.png){fig-align="right" fig-alt="webr ready image" height="0.5in"} 

-   Error message: 

    -   Did you accidentally delete or change some code? Click the refresh button at the top of the code cell and try running it again. 
    -   Did you run all the previous code chunks in this section? Return to Step 1 and make sure you pressed "Run code" in every step. 
    -   Did you spell and capitalize all the variables correctly, as specified in each step? If not, correct it and press "run code" in that step. 

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue: tile plot</button>
</div>

<div class="tutorial-part" style="display: none;">


## Make a tile plot of any county! {#sec-tilemylocation}

What if you wanted to look at the air quality data for another place (other than Portland and LA which were analyzed in Part 1)? You'll be able to do that below.

If you'd like a **challenge**, go to the [final section](#sec-codechallenge) to create a tile plot with multiple different variables you can adjust! 

### Step 1: Choose a county {#sec-choosecounty1}

First, you'll need to choose a county that you want to graph. 

Here are your options, organized by state. Click through them and find the county you'd like to graph. You'll need to remember the exact spelling AND capitalization. 

::: {.callout-note collapse="true"}
## States and County Names

```{r}
#| output: true
#| echo: false
##| eval: false

library(DT)
library(knitr)
usa_aqi_data|>
  select('State.Name','county.Name')|>
  unique()|>
  group_by(State.Name)|>
  datatable()
#usa_aqi_data|>
#  select('State.Name','county.Name')|>
#  unique()|>
#  group_by(State.Name)|>
#  kable()
```
:::

### Step 2: Add your county name to the code

Now, you'll tell the computer which county you chose.

**Important** make sure you spell the County name exactly as you found it in the table above, and be sure to use proper capitalization as well. 


::: panel-tabset 

## Code editor

**Type** your county name in the code chunk below. Replace the red line with the county but DON'T delete the quotes `""`. 

**Press** Run Code

```{webr-r}
myCounty = "__________"

```

## Example

```{webr-r}
myCounty = "Multnomah"

```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 3: Make a tile plot

Now we can graph! Click through the tabs at the top of the code editor to see more options for customizing your graph. 

::: panel-tabset

## Code editor

**Press** run code

```{webr-r}
myCountyData<- usa_aqi_data|>
  filter(county.Name==myCounty)|>
  mutate(Year=as.double(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(Category = factor(Category, levels= colLabels)) 
  
  ggplot(myCountyData, aes(x = DOY, y = Year, fill = Category))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)+
  labs(x="Day of Year", y="Year", title=paste0("AQI levels for ", myCounty))
```


## View multiple counties at once

Want to combine county data? 

**Replace** the red lines with your county names! Make sure you enclose them with quotes `""` and spell their names properly (refer back to [this table](#sec-tilemylocation)).

**Press** run code

```{webr-r}
myCounty = "______" 
myCounty2 = "______"

```


**Example**: 
```{r}
#| eval: false
myCounty = "Clackamas" 
myCounty2 = "Multnomah"
```

Now, let's make the graph again:

```{webr-r}

myCountyData<- usa_aqi_data|>
  filter(county.Name==myCounty | county.Name==myCounty2) |>
  mutate(Year=as.double(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(Category = factor(Category, levels= colLabels))
  
ggplot(myCountyData, aes(x = DOY, y = Year, fill = Category))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)+
  labs(x="Day of year", y="Year", title=paste0("AQI levels for ", myCounty, " and ", myCounty2))
```

## Troubleshooting

-   Run Code button not working: Make sure you wait until the green circle at the very top of this page says "Ready!" We have some code running in the background and the green circle indicates it has finished running. ![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/webrready.png){fig-align="right" fig-alt="webr ready image" height="0.5in"} 

-   Error message: 

    -   Did you accidentally delete or change some code? Click the refresh button at the top of the code cell and try running it again. 
    -   Did you run all the previous code chunks in this section? Return to the code editor where you chose your county name. Make sure you clicked the "Run code" button.
    -   Did you spell and capitalize the County name correctly, exactly as it was found in the table of ["States and County Names"?](#sec-tilemylocation) 

:::

Great work! Want to create a more complicated tile plot? Go to the [Challenge section](#sec-codechallenge) at the very end of this tutorial to learn how to adjust more variables!

Otherwise, click "continue" to view your raw data.

<button id="continue-button" class="btn btn-primary float-start me-2">Continue - View Raw Data </button>
</div>

<div class="tutorial-part" style="display: none;">



## View raw data {#sec-rawdata}

After graphing, you may wonder why the graph looks the way it does. Here, you can look at your raw data. 

### Choose a county 

First, you'll need to choose a county that you want to graph. See section [Choose a county](#sec-tilemylocation) to see a list of county options.

After choosing a county, tell the computer which county you chose.

**Important** make sure you spell the County name exactly as you found it in the table above, and be sure to use proper capitalization as well. 


::: panel-tabset 

## Code editor

**Type** your county name in the code chunk below. Replace the red line with the county but DON'T delete the quotes `""`. Keep all the code below the red line as well. 

**Press** Run Code

```{webr-r}
myCounty = "__________"

myCountyData<- usa_aqi_data|>
  filter(county.Name==myCounty)
```

## Example

**Press** run code

```{webr-r}
myCounty = "Multnomah"

myCountyData<- usa_aqi_data|>
  filter(county.Name==myCounty)
```
:::

### Raw data

Click the blue box to see raw data for the county you chose. 

::: {.callout-note collapse="true"}

## Open this blue box first!

**Press** run code to see your raw data! 

It might be very large, so you can click the blue rectangle again to close the data. 

```{webr-r}
myCountyData
```

Note: If this code doesn't work, it's because you haven't chosen a county in a previous step. Return to [Choose a county](#sec-tilemylocation) and run the code to choose your county. 
:::

Click "continue" for a coding challenge.

<button id="continue-button" class="btn btn-primary float-start me-2">Continue: Tile plot challenge </button>
</div>

<div class="tutorial-part" style="display: none;">


## Challenge: Tile plot with more variable options {#sec-codechallenge}

Want to create a more complex tile plot? In this section, you'll have the opportunity to customize the x axis, legend, and plot labels. 

### Step 1: Choose your location {#sec-challengestep1}

First, you'll tell the computer which county you'd like to graph. 

**Important** make sure you spell the County name exactly as you found it in the [table above](#sec-tilemylocation), and be sure to use proper capitalization as well. 

::: panel-tabset 

## Code editor

**Type** the county name in the code chunk below. Replace the red line with the county but DON'T delete the quotes `""`. 

**Press** run code

```{webr-r}
myCounty = "__________"

```

## Example

```{webr-r}
myCounty = "Multnomah"

```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 2: Choose your variables

Next, you can decide whether you want to view the data by **month** or by **day of the year**. In the graph we made previously, we looked at the AQI index for each **day of year**. But, if you'd like, you can combine the data and look at it by **month**. 

Choose which one you prefer and **press** run code below. 

::: panel-tabset
## View data by MONTH

```{webr-r}
xvar = 'Month'
```

## View data by DAY OF YEAR

```{webr-r}
xvar = 'DOY'
```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


### Step 3: Choose your category levels

The EPA has defined category levels for air quality (good, moderate, unhealthy for sensitive groups, unhealthy, very unhealthy, hazardous). But maybe, you want to adjust those categories. For example, you might be extra sensitive to air pollution, so you want the "good" category to be smaller. Here, you have the option to define those categories. 

-   If you want to keep the categories the same, skip this step!

-   Below, you can change the numbers for each category. Each category includes numbers **equal to or greater than** the one you input. For example, right now *hazardous* is anything equal to or greater than 301, and very unhealthy is between 201-300. 

**Replace** the current numbers with your chosen AQI values.

**Press** run code

```{webr-r}

hazardous = 301

very_unhealthy = 201

unhealthy = 151

unhealthy_for_sensitive_groups = 101

moderate = 51

good = 0

```

::: {.border-left}

**Stop and think** 

-   Why did you choose the AQI values you did for each category? 

-   How do you think the EPA makes those decisions? (Check out [table 6 in this document](https://document.airnow.gov/technical-assistance-document-for-the-reporting-of-daily-air-quailty.pdf){target="_blank"} if you want more information on this!)

-   Do you think one AQI level affects everyone the same? Or does it affect some people more than others? 
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


### Step 4: Add labels

Now let's add labels to your tile plot. 

Type in names for your labels below. Replace the red lines and keep the quotes `""`. 

-   The `xlabel` is the label for the bottom axis. 

-   The `ylabel` is the label for the left axis. This will be year for all plots.

-   The `title` tells the reader what the graph is about and will be on top of the graph. 

::: panel-tabset

## Code editor

**Type** your labels below. 

**Press** run code.

```{webr-r}
xlabel = "_____"

ylabel = "Year"

title = "_____"

```

## Example
```{webr-r}
xlabel = "Month"

ylabel = "Year"

title = "AQI Levels for Multnomah County"

```
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Step 5: Graph

Now let's make your graph! 

**Press** run code below to see your graph. If you want to know more about how the code works, click "Learn more"!

::: panel-tabset

## Code editor

**Press** run code

```{webr-r}

colLabels <- c(paste0('Good: AQI under ', moderate), paste0('Moderate: AQI over ', moderate), paste0('Unhealthy for Sensitive Groups: AQI over ', unhealthy_for_sensitive_groups), paste0('Unhealthy: AQI over ', unhealthy), paste0('Very Unhealthy: AQI over ', very_unhealthy), paste0('Hazardous: AQI over ', hazardous))

myColors <- c('seagreen','yellow', 'orange1', 'red','darkmagenta', 'darkred')

aqi_colors<- setNames(object=myColors, nm=colLabels)

myCountyData<- usa_aqi_data|>
  filter(county.Name==myCounty) |>
  mutate(Year=as.double(format(as.Date(Date), "%Y")),
        Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(AQI_Category = case_when(AQI >= hazardous ~ paste0('Hazardous: AQI over ', hazardous),
                                  AQI >= very_unhealthy ~ paste0('Very Unhealthy: AQI over ', very_unhealthy),
                                  AQI >= unhealthy ~ paste0('Unhealthy: AQI over ', unhealthy),
                                  AQI >= unhealthy_for_sensitive_groups ~ paste0('Unhealthy for Sensitive Groups: AQI over ', unhealthy_for_sensitive_groups),
                                  AQI >= moderate ~ paste0('Moderate: AQI over ', moderate),
                                  TRUE ~ paste0('Good: AQI under ', moderate)))|>
  mutate(AQI_Category = factor(AQI_Category, levels= colLabels)) 

  ggplot(myCountyData, aes(x = .data[[xvar]], y = .data[["Year"]], fill = .data[["AQI_Category"]]))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)+
  labs(x=xlabel, y="Year", title=paste0("AQI levels for ", myCounty))
```

## Learn more

I'll get to this :) 

## Troubleshooting

-   Run Code button not working: Make sure you wait until the green circle at the very top of this page says "Ready!" We have some code running in the background and the green circle indicates it has finished running.   ![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/webrready.png){fig-align="right" fig-alt="webr ready image" height="0.5in"} 

-   Error message: 

    -   Did you accidentally delete or change some code? Click the refresh button at the top of the code cell and try running it again. 
    -   Did you run all the previous code chunks in this section? Return to Step 1 and make sure you pressed "Run code" in every step. 
    -   Did you spell and capitalize all the variables correctly, as specified in each step? If not, correct it and press "run code" in that step. 

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Congratulations!

You have finished this tutorial and made lots of different types of air quality graphs! Excellent work!

![from.giphy.com](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2l2MDhxODdjaDE2YmF3amxjbm54dXhxNW0zZGtzandzcnFhemlwaiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xUOxf7XfmpxuSode1O/giphy.gif)

</div>