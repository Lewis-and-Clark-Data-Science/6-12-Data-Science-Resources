---
title: "AQI Part 1 - Introduction to Data Science"
filters: 
  - webr
  - naquiz

output: 
  html: 
    toc: true
    toc-depth: 1
    self-contained: false
    toc-expand: true
    sidebar: true
toc: true
toc-depth: 2
---

<script>
console.log("Script loaded");

document.addEventListener("DOMContentLoaded", function() {
    let currentPartIndex = 0;
    const parts = document.querySelectorAll(".tutorial-part");
    const buttons = document.querySelectorAll("button[id^='continue-button']");
    const nextButton = document.getElementById("next-button");
    const headerHeight = document.querySelector("header") ? document.querySelector("header").offsetHeight : 0;
    const sidebarLinks = document.querySelectorAll("#quarto-margin-sidebar .sidebar a"); // Updated selector

    // Log the selected elements
    console.log('Tutorial parts:', parts);
    console.log('Continue buttons:', buttons);

    // Hide all tutorial parts except the first one
    parts.forEach(function(part, index) {
        if (index !== 0) {
            part.style.display = "none";
        }
    });

    // Function to scroll to the top of the element, accounting for a fixed header
    function scrollToElement(element) {
        const elementTop = element.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
            top: elementTop - headerHeight,
            behavior: "smooth"
        });
    }

    // Function to show a specific part
    function showPart(index) {
        if (index >= 0 && index < parts.length) {
            parts.forEach((part, idx) => {
                part.style.display = (idx === index) ? "block" : "none";
            });
            scrollToElement(parts[index]);
            currentPartIndex = index;
        }
    }
    
     // Function to show all parts up to a specific index
    function showPartsUpTo(index) {
        parts.forEach((part, idx) => {
            if (idx <= index) {
                part.style.display = "block";
            }
        });
        scrollToElement(parts[index]);
        currentPartIndex = index;
    }

    // Add click event listeners to each button
    buttons.forEach(function(button, index) {
        button.addEventListener("click", function() {
            if (currentPartIndex < parts.length - 1) {
                parts[currentPartIndex].style.display = "block";
                buttons[currentPartIndex].style.display = "none";
                currentPartIndex++;
                showPartsUpTo(currentPartIndex);
            } else {
                alert("End of tutorial");
            }
        });
    });

    // Listen for hash changes to navigate to the correct section
    window.addEventListener("hashchange", function() {
        const hash = window.location.hash;
        if (hash) {
            const targetPart = document.querySelector(hash);
            if (targetPart) {
                const targetIndex = Array.prototype.indexOf.call(parts, targetPart);
                showPartsUpTo(targetIndex);
                buttons.forEach((button, idx) => {
                  if (idx < targetIndex) {
                  button.style.display="none";}});
            }
        }
    });

    // Check the URL hash on page load
    const initialHash = window.location.hash;
    if (initialHash) {
        const initialTarget = document.querySelector(initialHash);
        if (initialTarget) {
          const intialIndex=Array.prototype.indexOf.call(parts, initialTarget);
            showPartsUpTo(initalIndex);
            buttons.forEach((button, idx) => {
                if (idx < initialIndex) {
                    button.style.display = "none";
                }
            });
        }
    }
    // Add click event listener to the new next button
    if (nextButton) {
        nextButton.addEventListener("click", function() {
            window.location.href = "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/tutorials/AQI_tutorial_advanced.html"; 
        });
    }
});

</script>



```{r}
#| output: false
#| echo: false
#| eval: false
# This is for me to experiment in r, not for use in the tutorial
library(tidyverse)
portland_AQI_2000 <- read_csv("portland_AQI_2000.csv")

colnames(portland_AQI_2000)[2] <- 'AQIVal'

colLabels <- c('Good', 'Moderate', 'Unhealthy','Unhealthy for Sensitive Groups', 'Very Unhealthy', 'Hazardous')

myColors <- c('#238B44','#FFFF00', '#FFA500', '#E31A1C','#8F3F97', '#861130')

aqi_colors<- setNames(object=myColors, nm=colLabels)

#Prior labels
portland_AQI_2000 |> 
  mutate(Date=mdy(Date))|>
  mutate(Year=year(Date),
          Month = month(Date),
         DOY = yday(Date), 
         Day = weekdays(Date))|> 
  mutate(AQI_Category = case_when(AQIVal >= 250.5 ~ 'Hazardous',
                                  AQIVal >= 150.5 ~ 'Very Unhealthy',
                                  AQIVal >= 55.5 ~ 'Unhealthy',
                                  AQIVal >= 35.5 ~ 'Unhealthy for Sensitive Groups',
                                  AQIVal >= 12.1 ~ 'Moderate',
                                  TRUE ~ 'Good'))|>
  mutate(AQI_Category = factor(AQI_Category, levels= colLabels)) |>
  
  ggplot(aes(x = DOY, y = Day, fill = AQI_Category))+
  geom_tile()+
  #scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)


#Proper labels (I think)
portland_AQI |> 
  mutate(Date=mdy(Date))|>
  mutate(Year=year(Date),
          Month = month(Date),
         DOY = yday(Date))|> 
  mutate(AQI_Category = case_when(AQIVal >= 301 ~ 'Hazardous',
                                  AQIVal >= 201 ~ 'Very Unhealthy',
                                  AQIVal >= 151~ 'Unhealthy',
                                  AQIVal >= 101 ~ 'Unhealthy for Sensitive Groups',
                                  AQIVal >= 51 ~ 'Moderate',
                                  TRUE ~ 'Good'))|>
  mutate(AQI_Category = factor(AQI_Category, levels= colLabels)) |>
  
  ggplot(aes(x = DOY, y = Year, fill = AQI_Category))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)


#Try with world data

#First, try with github path
library(httr)
req <- GET("https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/daily_aqi")
stop_for_status(req)
filelist <- unlist(lapply(content(req)$tree, "[", "path"), use.names = F)
grep("daily_aqi", filelist, value = TRUE, fixed = TRUE)


aqi_world<- read.csv("daily_aqi_by_county_2023.csv")
aqi_clackmult<- aqi_world|>
  filter(county.Name=="Clackamas"|county.Name=="Multnomah")

library(tidyverse)
world_aqi <- list.files(path="daily_aqi", full.names = TRUE)|>
  lapply(read_csv)|>
  bind_rows() 
  
glimpse(world_aqi)
aqi_myCounty<- world_aqi|>
  filter(`county Name`=="Clackamas"|`county Name`=="Multnomah")

colLabels <- c('Good', 'Moderate', 'Unhealthy','Unhealthy for Sensitive Groups', 'Very Unhealthy', 'Hazardous')

myColors <- c('#238B44','#FFFF00', '#FFA500', '#E31A1C','#8F3F97', '#861130')

aqi_colors<- setNames(object=myColors, nm=colLabels)

aqi_myCounty |> 
  mutate(Year=format(as.Date(Date), "%Y"),
        Month = month(Date),
         DOY = yday(Date), 
         Day = weekdays(Date))|> 
  #mutate(AQI_Category = case_when(AQIVal >= 250.5 ~ 'Hazardous',
  #                                AQIVal >= 150.5 ~ 'Very Unhealthy',
  #                                AQIVal >= 55.5 ~ 'Unhealthy',
  #                                AQIVal >= 35.5 ~ 'Unhealthy for Sensitive Groups',
  #                                AQIVal >= 12.1 ~ 'Moderate',
  #                                TRUE ~ 'Good'))|>
  mutate(Category = factor(Category, levels= colLabels)) |>
  
  ggplot(aes(x = DOY, y = Year, fill = Category))+
  geom_tile()+
  #scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)

url<-paste0("https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/daily_aqi/daily_aqi_by_county_",2000:2023,".csv")
dest<- paste0("daily_aqi_by_county_",2000:2023,".csv")

files<- lapply(url, FUN = download.file(url,destfile = paste0("daily_aqi_by_county_",2000:2023,".csv")))

url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/daily_aqi/daily_aqi_by_county_2000.csv"
download.file(url,destfile = paste0("daily_aqi_by_county_2000.csv"))
world_data<- read.csv("daily_aqi_by_county_2000.csv")
for (i in 2001:2023){
  url<- paste0("https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/daily_aqi/daily_aqi_by_county_",i,".csv")
  download.file(url,destfile = paste0("daily_aqi_by_county_",i,".csv"))
  new_data <- read.csv(paste0("daily_aqi_by_county_",i,".csv"))
  world_data<- bind_rows(world_data,new_data)
}

#issue 2007 has int data for State.Code instead of chr data


temp<- tempfile()
download.file("https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/aqi_usa_2000_2023.csv.zip", temp)
usa_aqi_data<- read.csv(unz(temp,"usa_aqi_data.csv"))
unlink(temp)


library(downloader)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/aqi_usa_2000_2023.csv.zip"
download(url, dest="dataset.zip", mode="wb") 
usa_aqi_data<- unzip("dataset.zip", exdir = "./")|>
  read.csv()



myCountyData<- usa_aqi_data|>
    filter(county.Name=="Clackamas") |>
    mutate(Year=format(as.Date(Date), "%Y"),
           Month = month(Date),
           DOY = yday(Date))|> 
    mutate(Category = factor(Category, levels= colLabels))

ggplot(myCountyData, aes_string(x = "DOY", y = "Year", fill = "Category"))+
    geom_tile()+
    scale_fill_manual(values=aqi_colors, drop=FALSE)+
    labs(x="xlabel", y="Year", title="AQI levels for")+
    scale_y_continuous(limits=c(2010,2020))
```


```{r}
#| include: false

library(tidyverse)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Portland_2.5_2000-2023.csv"
download.file(url, "Portland_2.5_2000_2023.csv")
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/LosAngeles_2.5_2000-2023.csv"
download.file(url, "LosAngeles_2.5_2000_2023.csv")
portland_AQI<- read_csv("Portland_2.5_2000_2023.csv")
la_AQI<- read_csv("LosAngeles_2.5_2000_2023.csv")

```

```{webr-r}
#| context: setup
library(tidyverse)
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/Portland_2.5_2000-2023.csv"
download.file(url, "Portland_2.5_2000_2023.csv")
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/LosAngeles_2.5_2000-2023.csv"
download.file(url, "LosAngeles_2.5_2000_2023.csv")
portland_AQI<- read.csv("Portland_2.5_2000_2023.csv")
la_AQI<- read.csv("LosAngeles_2.5_2000_2023.csv")
colnames(portland_AQI)[2] <- 'AQIVal'
colnames(la_AQI)[2] <- 'AQIVal'

colLabels <- c('Good', 'Moderate', 'Unhealthy','Unhealthy for Sensitive Groups', 'Very Unhealthy', 'Hazardous')

myColors <- c('seagreen','yellow', 'orange1', 'red','darkmagenta', 'darkred')

aqi_colors<- setNames(object=myColors, nm=colLabels)

```


## Introduction

Welcome to this lesson on air quality! We'll be using **data science** to learn about **air quality**. This tutorial will introduce coding to help you better understand air quality. Advance through the tutorial by clicking the blue "Continue" buttons. By the end of the tutorial, you will see how to create an air quality graph. 

Note, this is **Part 1** of the air quality tutorials. In Part 2, you will be able to customize air quality graphs for any location you choose! [Click here](AQI_tutorial_advanced.qmd) to navigate to Part 2 now. 

<div class="tutorial-part" style="display: block;">

First, let's learn about air quality. Check out this video to learn more about how air quality affects us. 

{{< video https://www.youtube.com/watch?v=zj4rd77EAt4 >}}

Click "Continue" to move to the next section. 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Data Science

What is data? 

-   Data is large amounts of information that you collect. Often, it looks like a lot of numbers that are collected to describe some phenomenon. 

-   For example, if you measure the temperature every day in one location for one year, you would have created **data**. You can then use **data science** to analyze that data. 

What is data science? 

-   Data science is the ability to synthesize **data** and derive meaningful information. Often, graphs, maps, models, and charts are used to help understand data and display information. 

**Stop and think** 

::: panel-tabset
## Question

::: question
**What is an example of data?**

::: choices
::: {.choice .correct-choice}
The age and grade of everyone in your school
:::

::: {.choice .correct-choice}
The favorite restaurant of everyone who walks down your street
:::

::: {.choice .correct-choice}
The pm2.5 data for every day in 2023 in Portland
:::

::: {.choice .correct-choice}
All of the above
:::
:::
:::
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

::: columns
:::{.column width=50%}
## Using the computer to do data science 

In this tutorial, we're going to use coding to analyze large amounts of data. We'll be able to create graphs by writing code. 

We're going to use a coding language called **R**. Basically, "R" is a collection of commands that the computer understands. You can tell the computer one of the commands and it will know to do something.

:::
:::{.column width=50%}
![https://imgur.com/i-heard-hes-good-coding-3F7d7](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/dogcoding.jpg){height=3in}
:::
:::
### Introduction to R

This tutorial lets you use R to work with data. Throughout the tutorial, there are gray boxes with a green "run code" button. These are called code chunks. You can type commands into these boxes and it will output answers. Let's try it out.

One command the computer knows is multiplication! Try typing `5*3` in the box right below this. Then **press** the green play button that says "run code".

::: panel-tabset

## Code editor

```{webr-r}
# Type your code here!


```

## Answer

**Press** run code

```{webr-r}
# Type your code here!
5*3

```
:::

Did you see the number 15 pop out?

Here's another code chunk you can try typing something into. Maybe you want to try a division problem? Or maybe you want the computer to say hello to you? There's a few different tabs you can click on to learn how to do cool things!

::: panel-tabset
## Code editor

Want to try out your own code? Maybe another math problem? Here's a place to do that. Otherwise click on the tabs to learn something new!

```{webr}
#Type your code here



```

## Say hello

Would you like the computer to say hello to you?

First, type your name where the blank \_\_\_\_\_\_\_ is, in the second code chunk. Don't delete the quotation marks.

Here's an example:

```{webr}
#| read-only: true
name = "Olivia"
```

Now your turn. Type your name instead of the blank \_\_\_\_\_ and then click play:

```{webr}
name = "_____"

cat("Hello", name, "How are you today?")

```

## Find the largest number

We can use r to find the largest number in a long list of numbers. To try this out, type a bunch of numbers inside the parentheses (\_\_\_\_\_\_). Separate your numbers with a comma. Don't delete anything else!

Here's an example:

```{webr-r}
#| read-only:true
numbers = c(41, 55, 98, 104, 2, 8)
```

Now you try. **Type** your numbers after the first parenthesis and separate them with a comma. Then **click** run code.

```{webr-r}
numbers = c(_,_,_,_,_,_)
```

Now let's run a function that will tell us which number is the biggest. **Click** the play button on this code chunk too.

```{webr-r}
max(numbers)
```
:::

### Analyzing data with R

The programming language R can also do very complicated things, like work with large amounts of data and create graphs. 

-   You can import data from various sources, clean and process it, perform statistical analyses and generate reports or visualizations

-   We are going to be utilizing the data visualization aspect and create graphs from a big data set

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


## Our data

::: columns
::: {.column width="50%"}

Today, we'll be looking at air quality data [from the EPA](https://www.epa.gov/outdoor-air-quality-data/air-data-tile-plot). It contains data that was collected nearly every day for 23 years (2000-2023). It calculates the **air quality index** based on the **PM 2.5** levels. 

We're focusing on Portland and Los Angeles air quality data. 

:::
:::{.column width="30%"}

![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/aqiimage.jpg){fig-align="center" fig-alt="aqi index" height="1.75in" fig-cap-location="margin"}


:::
:::{.column width="20%"}
Image from https://cleanairenc.org/
blog/2017/02/16/
north-carolinas-air-quality/
:::
:::

![From.maps.google.com](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/portlandla.png){fig-align="left" fig-alt="Portland LA map" height="4in"}


Click the blue box below to view the data. 

::: {.callout-note collapse="true"}
## Air quality raw data Portland

```{r}
#| echo: false
#| output: true
library(knitr)
library(DT)
datatable(portland_AQI)
#kable(portland_AQI)

```
:::

::: {.callout-note collapse="true"}
## Air quality raw data Los Angelos

```{r}
#| echo: false
#| output: true
library(DT)
datatable(la_AQI)
```
:::

Wow that's a lot of data! It's pretty hard to get any meaningful information from just that table of information. Luckily, we can use R to better understand it and make graphs! 

Before we use R, though, let's try to understand a bit of what's going on. 

-   At the top of the table, there are bolded words. These are column titles and refer to the **variable names** that are collected when measuring air quality. 

-   Underneath the variable names, you'll see individual **entries** for the data. 

-   At the very bottom of the data table, you can click to different pages of data and see how many total entries there are.

**Stop and think**

::: panel-tabset

## Question

::: question 

*How many data entries are there in the Los Angeles data?* 

::: choices
::: {.choice .correct-choice}
8,594 data entries
:::
::: choice
8,744 data entries
:::
::: choice
10 data entries
:::
::: choice
100 data entries
:::
:::
:::
:::


::: panel-tabset

## Question

::: question 

*What was the* ***PM2.5 AQI Value*** *in Portland on* ***01/01/2000***? 

::: choices
::: choice
158
:::
::: choice
62
:::
::: {.choice .correct-choice}
49
:::
::: choice
100
:::
:::
:::
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


### Data location

Let's find out exactly where the air quality data was recorded. If you look at the data table, are you able to find all the **locations (sites) in Portland** where they recorded the air quality? 

-   This is a pretty hard task, as it requires you to look through all the data and find all the different site names. Luckily, we can use the computer to quickly check how many locations there are. 

-   The R command `unique()` outputs all the unique data entries in one column. In other words, it will tell us all the **different** entries the Site Name column. 

**Press** run code below. If you want to learn more about the code, click "Learn more"!

::: panel-tabset

## Code editor

```{webr-r}
unique(portland_AQI$Site.Name)
```

## Learn more

The command we used is 
```{r} 
#| eval: false
unique(portland_AQI$Site.Name)
```

-   `portland_AQI` specifies the data we're looking at. In this case, `portland_AQI` is the name of our data frame - it contains all the data in the Portland table you saw above.
      
      -   The name for the Los Angeles data is `la_AQI`. It contains all the data in the Los Angeles table you saw above.

-   The `$` tells R to find a column name. 

-   `Site.Name` is the name of the column we want to look at, as it contains the locations

## Challenge

Can you figure out the names of the Los Angeles locations where they measured air quality data? 

**Edit** the code below so that it outputs Los Angeles site names. 

*Hint:* You'll need to change the part of the code that says `portland_AQI`. What's the name of the Los Angeles data set? 

```{webr-r}
unique(portland_AQI$Site.Name)

```

## Challenge Answer

```{webr-r}
unique(la_AQI$Site.Name)

```
:::

Do you recognize any of the site names? Are any close to where you live?

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


## Graphing our data

Now that we understand **what** the data table contains, let's try to graph it and better understand what it **means**. 

Our goal is to make a graph of the overall air quality in Portland and Los Angeles by describing how **healthy** or **unhealthy** the air is. 

The EPA defines the following categories based on the air quality index (AQI): 

![From https://www.airnow.gov/aqi/aqi-basics/](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/aqilevels.png){fig-align="left" fig-alt="AQI color, description, index values" height="3in"}

We've inputted these values and colors into our code for the graph. 

You may have noticed that if you go to the [EPA website](https://www.epa.gov/outdoor-air-quality-data/air-data-tile-plot), they have options to generate a graph right there! So why would we make our own graph? Well, they have pretty limited options for what type of graph you can create and what variables you can choose. If we use R (coding), we have lots more options for types of graphs!

### AQI Tile Plot

We'll start by making a *tile plot* for the air quality index (AQI) from 2000-2023. Let's see what the graph looks like for Portland and Los Angeles. Later on, you'll have options to create other types of graphs for more locations.

**Press** run code below. Then, click through the tabs at the top of the code chunk to make a tile graph for Los Angeles.

::: panel-tabset

## Portland AQI Tile Graph

```{webr-r}

portland_AQI |> 
  mutate(Date=mdy(Date))|>
  mutate(Year=year(Date),
          Month = month(Date),
         DOY = yday(Date))|> 
  mutate(AQI_Category = case_when(AQIVal >= 301 ~ 'Hazardous',
                                  AQIVal >= 201 ~ 'Very Unhealthy',
                                  AQIVal >= 151~ 'Unhealthy',
                                  AQIVal >= 101 ~ 'Unhealthy for Sensitive Groups',
                                  AQIVal >= 51 ~ 'Moderate',
                                  TRUE ~ 'Good'))|>
  mutate(AQI_Category = factor(AQI_Category, levels= colLabels)) |>
  
  ggplot(aes(x = DOY, y = Year, fill = AQI_Category))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)+
  labs(x="Day of year", y="Year", title="AQI levels for Portland")

```

## Los Angeles AQI Tile Graph 

```{webr-r}
la_AQI |> 
  mutate(Date=mdy(Date))|>
  mutate(Year=year(Date),
          Month = factor(month(Date)),
         DOY = yday(Date))|> 
  mutate(AQI_Category = case_when(AQIVal >= 301 ~ 'Hazardous',
                                  AQIVal >= 201 ~ 'Very Unhealthy',
                                  AQIVal >= 151~ 'Unhealthy',
                                  AQIVal >= 101 ~ 'Unhealthy for Sensitive Groups',
                                  AQIVal >= 51 ~ 'Moderate',
                                  TRUE ~ 'Good'))|>
  mutate(AQI_Category = factor(AQI_Category, levels= colLabels)) |>
  
  ggplot(aes(x = DOY, y = Year, fill = AQI_Category))+
  geom_tile()+
  scale_y_reverse()+
  scale_fill_manual(values=aqi_colors, drop=FALSE)+
  labs(x="Day of year", y="Year", title="AQI levels for LA")

```

## Troubleshooting

-   Run Code button not working: Make sure you wait until the green circle at the very top of this page says "Ready!" We have some code running in the background and the green circle indicates it has finished running. ![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/webrready.png){fig-align="right" fig-alt="webr ready image" height="0.5in"} 

-   Error message: Did you accidentally delete or change some code? Click the refresh button at the top of the code cell and try running it again. 

:::

**Stop and think**

Talk with your neighbor about the graphs!

-   What do you notice?

-   What do you wonder? 

-   What is different between the two graphs? 

        -   Why are they different? 
        
-   What else would you like to know? 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

Next, you can move on to AQI Tutorial Part 2 in order to customize your own graphs! You'll be able to choose your own locations, make a scatterplot, and view raw data. 

![from giphy.com](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExeHl3cnk1M3FxN3Jza21tcGJ3a2lqOGg3NHpwY21ta3AxaGNpbDI2bCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/YgbWOUHSWoYMy0gCiU/giphy.gif)

<button id="next-button" class="btn btn-primary float-start me-2"> AQI Tutorial Part 2 </button>
</div>

