---
title: "Sea Level tutorial"
author: "Bel Kuhl, edited for web version by Olivia Spagnuolo"
filters: 
  - webr
  - naquiz
toc: true
toc-depth: 3
format: 
  html: 
    toc: true
    self-contained: false
---

<script>
console.log("Script loaded");

document.addEventListener("DOMContentLoaded", function() {
    let currentPartIndex = 0;
    const parts = document.querySelectorAll(".tutorial-part");
    const buttons = document.querySelectorAll("button[id^='continue-button']");
    const nextButton = document.getElementById("next-button");
    const headerHeight = document.querySelector("header") ? document.querySelector("header").offsetHeight : 0;
    const sidebarLinks = document.querySelectorAll("#quarto-margin-sidebar .sidebar a"); // Updated selector

    // Log the selected elements
    console.log('Tutorial parts:', parts);
    console.log('Continue buttons:', buttons);

    // Hide all tutorial parts except the first one
    parts.forEach(function(part, index) {
        if (index !== 0) {
            part.style.display = "none";
        }
    });

    // Function to scroll to the top of the element, accounting for a fixed header
    function scrollToElement(element) {
        const elementTop = element.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
            top: elementTop - headerHeight,
            behavior: "smooth"
        });
    }

    // Function to show a specific part
    function showPart(index) {
        if (index >= 0 && index < parts.length) {
            parts.forEach((part, idx) => {
                part.style.display = (idx === index) ? "block" : "none";
            });
            scrollToElement(parts[index]);
            currentPartIndex = index;
        }
    }
    
     // Function to show all parts up to a specific index
    function showPartsUpTo(index) {
        parts.forEach((part, idx) => {
            if (idx <= index) {
                part.style.display = "block";
            }
            if (idx > index){
            part.style.display = "none";
}
        });
        scrollToElement(parts[index]);
        currentPartIndex = index;
    }

    // Add click event listeners to each button
    buttons.forEach(function(button, index) {
        button.addEventListener("click", function() {
            if (currentPartIndex < parts.length - 1) {
                parts[currentPartIndex].style.display = "block";
                buttons[currentPartIndex].style.display = "none";
                currentPartIndex++;
                showPartsUpTo(currentPartIndex);
            } else {
                alert("End of tutorial");
            }
        });
    });

    // Listen for hash changes to navigate to the correct section
    window.addEventListener("hashchange", function() {
        const hash = window.location.hash;
        if (hash) {
            const targetPart = document.querySelector(hash);
            if (targetPart) {
                const targetIndex = Array.prototype.indexOf.call(parts, targetPart);
                showPartsUpTo(targetIndex);
                buttons.forEach((button, idx) => {
                  if (idx < targetIndex) {
                  button.style.display="none";}
                  if (idx >= targetIndex) {
                  button.style.display="block";
}
                  });
            }
        }
    });

    // Check the URL hash on page load
    const initialHash = window.location.hash;
    if (initialHash) {
        const initialTarget = document.querySelector(initialHash);
        if (initialTarget) {
          const intialIndex=Array.prototype.indexOf.call(parts, initialTarget);
            showPartsUpTo(initalIndex);
            buttons.forEach((button, idx) => {
                if (idx < initialIndex) {
                    button.style.display = "none";
                }
            });
        }
    }
    // Add click event listener to the new next button
    if (nextButton) {
        nextButton.addEventListener("click", function() {
            window.location.href = "https://www.example.com"; 
        });
    }
});

</script>


```{webr-r}
#| context: setup

# Install and load packages
library(tidyverse)
library(knitr)

# Load data 
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/No_Garibaldi.csv"
download.file(url, "No_Garibaldi.csv")
#Pulls data that has been loaded into the 6-12-Data-Sceince_resources github repo. 
No_Garibaldi <- read_csv('No_Garibaldi.csv')
Astoria<-No_Garibaldi|>filter(Location=="Astoria")

Astoria_Avg<-Astoria%>%
  group_by(Year, Location)%>%
  summarize(Avg=mean(Monthly_MSL)) %>% 
  filter(Year>1969&Year<2022)

sea_level <- No_Garibaldi %>% 
filter(Year>1969, Year<2023 , Location != "Majuro C, Marshall Islands") %>% 
  group_by(Location,Year) %>% 
  summarize(Avg=mean(Monthly_MSL))

sea_level_marshall <- No_Garibaldi%>%
  group_by(Year,Location)%>%
  summarize(Avg=mean(Monthly_MSL))%>%
  filter(Year>1969&Year<2023)%>% 
  split(.$Location) %>% 
  map(~lm(Avg ~ Year, data = .x)) %>% 
  map_df(broom::tidy, .id = 'Location') %>%
  filter(term == 'Year')%>%
  mutate(Region=case_when(Location %in% c("Astoria","Los Angeles","San Francisco")~"West Coast",Location %in% c("Charleston SC","Sewells Point VA", "Portland ME")~"East Coast",Location %in% c("Majuro C, Marshall Islands")~"Oceania"))
```

```{r}
#| include: FALSE

# Install and load packages
library(tidyverse)
library(knitr)
library(DT)

# Load data 
url<- "https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/data/No_Garibaldi.csv"
download.file(url, "No_Garibaldi.csv")
#Pulls data that has been loaded into the 6-12-Data-Sceince_resources github repo. 
No_Garibaldi <- read_csv('No_Garibaldi.csv')
Astoria<-No_Garibaldi|>filter(Location=="Astoria")

Astoria_Avg<-Astoria%>%
  group_by(Year, Location)%>%
  summarize(Avg=mean(Monthly_MSL)) %>% 
  filter(Year>1969&Year<2022)

sea_level <- No_Garibaldi %>% 
filter(Year>1969, Year<2023 , Location != "Majuro C, Marshall Islands") %>% 
  group_by(Location,Year) %>% 
  summarize(Avg=mean(Monthly_MSL))
```

::: columns
::: {.column width="55%"}

## Introduction

Welcome to this lesson on changing sea levels. We'll be looking at how the sea level is changing in different parts of the world. We're going to use the computer to help us look at and understand data. 
:::
::: {.column width="10%"}
:::
::: {.column width="35%"}

<br>

![From https://www.climate.gov/news-features/understanding-climate/climate-change-global-sea-level](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/sea_houses.jpg){fig-align="right" fig-alt="sea hitting houses" height="2in"}
:::
::: 
<div class="tutorial-part" style="display: block;">


## Change in Sea Level Since 1970

First, let's take a look at this map showing how sea levels have changed since 1880. It shows the change in sea level compared to a baseline determined by the average sea level between 1993 and 2008.

![From https://www.climate.gov/news-features/understanding-climate/climate-change-global-sea-level](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/graph_sealevel.png){fig-align="left" fig-alt="Average global sea level change" height="4in"}

As we can see in the graph, there is an upwards trend of sea level rise. 

But how do we know there is an upward trend? How do we know what the sea level is in the first place? Check out [this video](https://www.britannica.com/video/179993/sea-level) to learn more about how scientists measure the sea level.

So, scientists use water level gauges as well as satellites to measure the sea level at any given time. They write down all the numbers they measure and collect it. This collection of numbers is called **data**. 

After we have all that data (often called **raw data**), other scientists will analyze it and use it to create graphs. That's what we're going to do today! We'll use the computer to code and analyze our data. 

Click "Continue" to learn about coding!

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Using R

We will use a coding language called "R". Basically, "R" is a collection of commands that the computer understands. You can tell the computer one of the commands and it will know to do something.

For example one command the computer knows is multiplication! Try typing `5*3` in the box right below this. Then click the green play button that says "run code"

::: panel-tabset

## Code editor

```{webr-r}
# Type your code here!


```

## Answer

**Press** run code

```{webr-r}
# Type your code here!
5*3

```
:::

What happened? Did you see the number 15 pop out?

The computer can also do very complicated things, like create graphs. We'll learn more about that later in this tutorial.

The box above where you typed `5*3` is called a **code chunk**. You can type commands into any similar box and it will tell the computer to do various things.

Here's another code chunk you can try typing something into. Maybe you want to try a division problem? Or maybe you want the computer to say hello to you? There's a few different tabs you can click on to learn how to do cool things!

::: panel-tabset
## Code editor

Want to try out your own code? Maybe another math problem? Here's a place to do that. Otherwise click on the tabs to learn something new!

```{webr}
#Type your code here



```

## Say hello

Would you like the computer to say hello to you?

First, type your name where the blank \_\_\_\_\_\_\_ is, in the second code chunk. Don't delete the quotation marks.

Here's an example:

```{webr}
#| read-only: true
name = "Olivia"
```

Now your turn. **Type** your name instead of the blank \_\_\_\_\_ and then **click** play:

```{webr}
name = "_____"

cat("Hello", name, "How are you today?")

```

## Find the largest number

We can use r to find the largest number in a long list of numbers. To try this out, type a bunch of numbers inside the parentheses (\_\_\_\_\_\_). Separate your numbers with a comma. Don't delete anything else!

Here's an example:

```{webr-r}
#| read-only:true
numbers = c(41, 55, 98, 104, 2, 8)
```

Now you try. **Type** your numbers after the first parenthesis and separate them with a comma. Then **click** run.

```{webr-r}
numbers = c(_,_,_,_,_,_)
```

Now let's run a function that will tell us which number is the biggest. **Click** the play button on this code chunk too.

```{webr-r}
max(numbers)
```

:::


<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Our data 

Now we're going to use coding to learn more about sea level. As we learned, scientists use satellites and water level gauges to measure the sea level. They collect all those numbers and it becomes **data**. 

Let's take a look at some sea level data for various coastal towns in the US. Click the blue box below to see the data. 

::: {.callout-note collapse="true"}
## Click this to see our data!

```{r}
#| echo: false
#| output: true
datatable(sea_level)
```
:::

Here, we see the average change in Sea Level recorded in various locations from 1970-2021. It's pretty hard to get any meaningful information from just that table of information - there's so many numbers to look at. Luckily, we can use R to better understand it and make graphs.

First, let's try to understand a bit of what's going on in the data table. 

-   At the top of the table, there are bolded words. These are column titles and refer to the **variable names**. 

-   Underneath the variable names, you'll see individual **entries** for the data. 

-   At the very bottom of the data table, you can click to different pages of data and see how many total entries there are.


::: panel-tabset

## Question

::: question 

*How many data entries are there in the data?* 

::: choices
::: {.choice .correct-choice}
318 data entries
:::
::: choice
99 data entries
:::
::: choice
10 data entries
:::
::: choice
400 data entries
:::
:::
:::
:::


::: panel-tabset

## Question

::: question 

The `Avg` column shows the average change in sea level compared to **WHAT?????** year.

*What was the average sea level change in Astoria in 1974?*

::: choices
::: choice
1.002
:::
::: choice
0.06667
:::
::: {.choice .correct-choice}
0.03383
:::
::: choice
-0.0432
:::
:::
:::
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Data Locations

Now let's look at where the data comes from. Can you figure out all the locations where sea level data was measured? Look back at the data and try to find some of the locations! 

It's probably kind of hard to find all the different locations. Luckily, we can use R to help us. The command `unique()` will tell us all the different data entries in one column. Let's use it with the `Location` column to find all the locations. 

::: panel-tabset

## Code editor

**Press** run code

```{webr-r}
unique(sea_level$Location)

```

## Learn more about the code

The code we used to find the different locations is `unique(sea_level$Location)`. Here's what all the parts of it do: 

-   `unique`: outputs all the different data entries in a column

-   `sea_level`: tells the computer to focus on the data set named 'sea_level'

-   `$`: tells the computer we are about to tell it the name of a column

-   `Location`: this is the name of the column we want to focus on 

## Coding Challenge

Can you figure out a way to see **all** the different years in the data set? 

Hint: Use the `unique()` function again on a different column! Make sure you spell everything correctly and use the exact capitalization as in the dataset. 

```{webr-r}
#Type your code here


```

## Challenge Answer

```{webr-r}
unique(sea_level$Year)
```

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

Here's a map of all the locations we have in our data: 

![](https://lewis-and-clark-data-science.github.io/6-12-Data-Science-Resources/files/figures/Map_w_Labels.png)

So, what do you think all this data is telling us? 

::: {.border-left}

**Stop and think**

-   How do you think the sea level has changed from 1970 to 2021? 

    -   Look back at the data and see if you can tell if it is rising or getting lower? 

    -   Is it easy or difficult to tell how it is changing? 

-   Focus on Astoria (the location shown first in the data). How has the sea level in Astoria changed from 1970-2021? 

Discuss with your neighbor how you think it is changing. 

:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Graphing our data

It was probably difficult to tell how the sea level is changing overall. Luckily we can use coding to help us out. We can create different types of graphs through coding. 

### Astoria Scatterplot

Let's start by focusing on Astoria and create a scatter plot. A scatter plot will plot a point for each individual data entry.

**Press** run code

```{webr-r}
Astoria_Avg <- filter(sea_level, Location=="Astoria")
  
ggplot(Astoria_Avg,aes(x=Year,y=Avg))+
  geom_point(color="salmon")+
  labs(title="Average Change In Sea Level per Meter in Astoria",y="Average Change in Sea Level (m)")+
  theme_light()
```

What can you tell from this graph? Does it help you understand how sea level is changing in Astoria? What would you add to make it easier to tell how sea level is changing? 

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Astoria scatterplot with line of best fit

One thing we can do to help understand the graph is add a line of best fit. This will help us see the overall trend of how sea level is changing. We can add a line of best fit very easily by adding on one more command to our code. 

*Code Challenge*: Can you spot what is different in this code compared to the previous graph code? What did we add to make a line of best fit? What color do you think the line will be? 

**Press** run code

```{webr-r}
Astoria_Avg <- filter(sea_level, Location=="Astoria")
  
ggplot(Astoria_Avg,aes(x=Year,y=Avg))+
  geom_point(color="salmon")+
  labs(title="Average Change In Sea Level per Meter in Astoria",y="Average Change in Sea Level (m)")+
  theme_light()+
  geom_smooth(method="lm",color="black",se=FALSE)
```


::: {.border-left}
**Stop and think**

Talk with your neighbor about the graphs!

-   What do you notice?

-   What do you wonder? 

-   What is the overall trend?
        
-   What else would you like to know? 
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">


### Scatterplot of other locations

Although the data varies per year, there appears to be an upwards trend within this data. This is an indicator for rising sea levels in this area.

How does this compare to other locations within the United States? Let's take a look at the 6 different locations across the US.

Let's look at a linear trend of these locations.

```{webr-r}

ggplot(sea_level, aes(x = Year, y = Avg, color = Location)) +
  geom_point(size=0.5)+  geom_smooth(method = lm, se = FALSE)+
  facet_wrap(vars(Location))+
  facet_wrap(. ~ factor(Location, levels = c("Astoria", "San Francisco", "Los Angeles","Portland ME","Sewells Point VA","Charleston SC")))+
  scale_color_manual(values = c(
    "Astoria" = "salmon",
    "Charleston SC" = "gold",
    "Los Angeles" = "chartreuse",
    "Portland ME" = "cyan2",
    "San Francisco" = "blue",
    "Sewells Point VA" = "blueviolet"))  +
  theme_light()+
  labs(title="Change in Sea Level from 1970-2022",x="Year",y="Meters")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

::: {.border-left}
**Stop and think**

Talk with your neighbor about the graph!

-   What do you notice?

-   What do you wonder? 

-   What is the overall trend in different locations?
        
-   What else would you like to know? 
:::


<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

### Bar graph of other locations

Turning to a more global scale, how does this compare to the low-lying island nation of Marshall Islands?

To represent this question, we can use a bar graph.

::: {.border-left}
**Stop and think**

What is the difference between a bar graph and a scatterplot?

Why might we use a bar graph to compare locations?
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

#### **Create a bar graph**

Here's the code to create a bar graph comparing the locations we previously looked at and the Marshall Islands. 

**Press** run code

```{webr-r}

ggplot(sea_level_marshall, aes(x = reorder(Location, estimate), y = estimate, fill=Location)) +
  geom_col(position="dodge")+
  theme_light()+
  labs(x="Location", y="Slope (m)",
       title="Change in the Change of Sea Level from 1970-2022")+
  facet_grid(. ~ factor(Region, levels = c("West Coast", "East Coast", "Oceania")), drop = TRUE, scales = "free_x", space = "free") +
  scale_fill_manual(values=c("Astoria"="salmon", "Charleston SC"="gold", 
                             "Los Angeles"="chartreuse","Portland ME"="cyan2",
                             "San Francisco"="blue","Sewells Point VA"="blueviolet",
                             "Majuro C, Marshall Islands" = "forestgreen")) +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


::: {.border-left}
**Stop and think**

Talk with your neighbor about the graph!

-   How is a bar graph different than a scatterplot? 

-   What information did you learn from the bar graph that you **did not** notice in the scatter plot?

-   Why might the sea level be rising faster in some locations than others? 
        
-   What else would you like to know? 
:::

<button id="continue-button" class="btn btn-primary float-start me-2">Continue</button>
</div>

<div class="tutorial-part" style="display: none;">

## Congratulations!!

You finished this tutorial on sea level! Nice work! Hopefully you learned a little bit about how we can use coding to create graphs. 

Data science can take on many forms, from data collection to coding. This is just a little nibble of the possibilities data science has to offer; there is so much more to chew on!

::: columns

::: {.column width="50%"}

![from.giphy.com](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExYnZvaTA1c3N0aXJ3NnZscDl6MHRhdDFwb2xhZDZldDgzeHJtcjlvcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/m6dm34kEpM1gc/giphy.gif)
:::

::: {.column width="50%"}

![from.giphy.com](https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExanRhamlkaHVkNnhuaWRhN3Y3aWxrMG95MzM1cDRtaTQ3ZTBscTgxMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3oKIPjagnSA6mZWS1G/giphy.gif)
:::
:::
</div>